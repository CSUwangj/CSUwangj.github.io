<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>LuckyDog | CSUwangj&#x27;s Blog - Notes</title>
	<link href="https://CSUwangj.github.io/categories/Notes/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://CSUwangj.github.io/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>8102-12-19T10:36:02+08:00</updated>
	<id>https://CSUwangj.github.io/categories/Notes/atom.xml</id>
	<entry xml:lang="en">
		<title>博文整理</title>
		<published>8102-12-19T10:36:02+08:00</published>
		<updated>2020-08-07T01:54:43.008688+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/bo-wen-zheng-li/" type="text/html"/>
		<id>https://CSUwangj.github.io/bo-wen-zheng-li/</id>
		<content type="html">&lt;p&gt;打算专门搞个整理用的东西，顺便可以看看自己有多少挖完没填的坑。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;游戏的随机，随机的游戏（新一期在复习密码学时候写）
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;you-xi-de-sui-ji-sui-ji-de-you-xi-yi-dang-wo-men-tao-lun-wei-sui-ji-shi-wo-men-zai-tao-lun-shi-yao&#x2F;&quot;&gt;游戏的随机，随机的游戏（一）：当我们讨论伪随机时我们在讨论什么&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;xiang-zuo-xiang-mu-yi-yang-zuo-bi-she&#x2F;&quot;&gt;像做项目一样做毕设&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;how-to-recover-des-master-key-from-round-key&#x2F;&quot;&gt;How to recover DES master key from round key&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;&quot;&gt;编程是很好玩的--md2docx是怎么写出来的&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin&#x2F;&quot;&gt;ACM中一些常见的问题及原因&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;guan-yu-san-lie-han-shu-de-yi-dian-si-kao&#x2F;&quot;&gt;关于散列函数的一点思考&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;you-yi-ci-zhuang-ji&#x2F;&quot;&gt;又一次装机&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;series&quot;&gt;Series&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;cryptography-engineering-exercise&#x2F;&quot;&gt;Cryptography Engineering Exercise&lt;&#x2F;a&gt;（暂时不打算填）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;overthewire-banditquan-gong-lue-jie-xi&#x2F;&quot;&gt;OverTheWire-Bandit全攻略+解析&lt;&#x2F;a&gt;（暂时不打算填）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;exploit-exercise-fusionquan-gong-lue-jie-xi&#x2F;&quot;&gt;Exploit-Exercise Fusion全攻略+解析&lt;&#x2F;a&gt;（已经弃坑）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;exploit-exercise-protostarquan-gong-lue-jie-xi&#x2F;&quot;&gt;Exploit-Exercise Protostar全攻略+解析&lt;&#x2F;a&gt;（EXP放完了，解析不打算填了）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;pwnxue-xi-ji-lu&#x2F;&quot;&gt;PWN学习记录&lt;&#x2F;a&gt;（已坑，勿念）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;id0-rsa-wphe-ji&#x2F;&quot;&gt;id0-rsa WP合集&lt;&#x2F;a&gt;（暂时不打算填）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;writeup&quot;&gt;WriteUp&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;regex-golf-challenge&#x2F;&quot;&gt;Regex Golf Challenge&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;actf-junior-2019-official-writeup-of-csuwangj-s-challenge&#x2F;&quot;&gt;ACTF Junior 2019 Official WriteUP of CSUWangj&#x27;s Challenge&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;afctf2018-crypto-officialwriteup&#x2F;&quot;&gt;AFCTF2018-Crypto OfficialWriteUp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;jarvisoj-wphe-ji&#x2F;&quot;&gt;JarvisOJ-WP合集&lt;&#x2F;a&gt;（弃坑）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;hgame2018-week2bu-fen-wp&#x2F;&quot;&gt;HGAME2018-week2部分WP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;hgame2018-week1wp&#x2F;&quot;&gt;HGAME2018-week1WP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;hit2018xin-sheng-sai&#x2F;&quot;&gt;HIT2018新生赛部分WP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;zai-piplian-bu-shang-wang-de-shi-hou-an-zhuang-pwntools&#x2F;&quot;&gt;在pip连不上网的时候安装pwntools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;ctfyong-huan-jing-da-jian&#x2F;&quot;&gt;CTF用环境搭建&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;an-zhuang-shi-gong-ju-ji-he&#x2F;&quot;&gt;安装式工具集合&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;qing-gong-ju-ge-ren-ji-he&#x2F;&quot;&gt;轻工具个人集合&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;ctfqing-gong-ju-ge-ren-ji-he&#x2F;&quot;&gt;CTF轻工具个人集合&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How I deploy Calibre-Web and tweak it</title>
		<published>2022-08-19T01:22:08+08:00</published>
		<updated>2022-08-28T03:57:23+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/how-i-deploy-calibre-web-and-tweak-it/" type="text/html"/>
		<id>https://CSUwangj.github.io/how-i-deploy-calibre-web-and-tweak-it/</id>
		<content type="html">&lt;h1 id=&quot;tl-dr&quot;&gt;TL;DR&lt;&#x2F;h1&gt;
&lt;p&gt;I managed to host a calibre-web with self signed certificate at non-standard port, and let it fetch metadata through proxy(fuck GFW).&lt;&#x2F;p&gt;
&lt;p&gt;And I found a solution to bulk upload my eBooks onto it.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;originate-from-an-ip&quot;&gt;Originate from an IP&lt;&#x2F;h1&gt;
&lt;p&gt;After moving place and settling down, I managed to have a publicly accessable IP. When you have a server, you want an IP. When you have an IP, you want a domain. When you have a domain, wow, you have all the great things on the internet in your pocket(if your server can be that small as a NUC).&lt;&#x2F;p&gt;
&lt;p&gt;So I began to find services that can be deployed on my server through an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awesome-selfhosted&#x2F;awesome-selfhosted#document-management---e-books&quot;&gt;awesome-list&lt;&#x2F;a&gt;. I want a document management server that can:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;access through web&lt;&#x2F;li&gt;
&lt;li&gt;can fetch metadata by ISBN&lt;&#x2F;li&gt;
&lt;li&gt;(best to have) user authentication&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And that&#x27;s where I found calibre-web.&lt;&#x2F;p&gt;
&lt;p&gt;I used calibre before, and it&#x27;s worked perfectly as a desktop software, but it&#x27;s built-in server just sucks. Maybe my word is too mean, it works as a just adequate E-book reader.&lt;&#x2F;p&gt;
&lt;p&gt;Calibre-web has user management so I can share books with my friends, and I can also get their collections. Calibre supports multiple formats for a book, so I can put source code on it. I can&#x27;t find a reason stop me choosing it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;let-s-deploy-it&quot;&gt;Let&#x27;s deploy it&lt;&#x2F;h1&gt;
&lt;p&gt;I love docker, and thankfully Calibre-web come with a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linuxserver&#x2F;docker-calibre-web&quot;&gt;docker image&lt;&#x2F;a&gt; built by LinuxServer.io team, and that&#x27;s where nightmare comes.&lt;&#x2F;p&gt;
&lt;p&gt;This docker image download and install most of its dependencies during build phase, in one &lt;code&gt;RUN&lt;&#x2F;code&gt; command, which should be a good practice because it can reduce redundant docker image layers.&lt;&#x2F;p&gt;
&lt;p&gt;But I&#x27;m in China, we got a Great Fire Wall to pass. Dependencies can fail for no reason at any download process, curl&#x2F;apt&#x2F;pip&#x2F;etc. So I rewrite the Dockerfile, separate every download process into one &lt;code&gt;RUN&lt;&#x2F;code&gt; command, and build it several times.&lt;&#x2F;p&gt;
&lt;p&gt;Image ready, all I need to do is run and see the success log... At least that&#x27;s what I thought.&lt;&#x2F;p&gt;
&lt;p&gt;For users who want to perform book conversion, they should run docker image with an extra environment variable &lt;code&gt;DOCKER_MODS=linuxserver&#x2F;mods:universal-calibre&lt;&#x2F;code&gt;, which will download it from internet, every f**king time you boot the image.&lt;&#x2F;p&gt;
&lt;p&gt;I know it&#x27;s not my or thier faults, fuck the GFW and its team, but problem should be solved. I download them and mounted them as docker volume. Finally, it runs successfully!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;proxies-cannot-be-used-with-advocate&quot;&gt;Proxies cannot be used with Advocate&lt;&#x2F;h1&gt;
&lt;p&gt;Everything was fine, login, admin, uploading. I upload a book and try to fetch metadata from internet, it succeed to fetch data, but failed to save the data. It shows &lt;code&gt;Error editing book: Proxies cannot be used with Advocate&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Jesus, I know I&#x27;m using a proxy, but if I don&#x27;t use a proxy, I cannot get access to Google Book, which is crucial for fetching metadata.&lt;&#x2F;p&gt;
&lt;p&gt;I searched on the internel and all I found is a github issue &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gshang2017&#x2F;docker&#x2F;issues&#x2F;120&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;gshang2017&#x2F;docker&#x2F;issues&#x2F;120&lt;&#x2F;a&gt; which is absolutely another Chinese fired, a Chinese who faced the same problem as me.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s 4 am, my mind is blowing, I gave up.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;read-the-fucking-source-code&quot;&gt;Read the fucking source code&lt;&#x2F;h1&gt;
&lt;p&gt;The day after that day, I remembered that I can check where disable proxy usaga, at least I can write my own service that can be used with a proxy.&lt;&#x2F;p&gt;
&lt;p&gt;Then I found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JordanMilne&#x2F;Advocate&#x2F;blob&#x2F;74594fb8d65c20fd1bf5f2eda75619605d340533&#x2F;advocate&#x2F;adapters.py#L31&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;JordanMilne&#x2F;Advocate&#x2F;blob&#x2F;74594fb8d65c20fd1bf5f2eda75619605d340533&#x2F;advocate&#x2F;adapters.py#L31&lt;&#x2F;a&gt;. Seems that &lt;code&gt;advocate&lt;&#x2F;code&gt; just doesn&#x27;t support proxy. Maybe I can write proxy support for it? I look around and found something interesting in its &lt;code&gt;README&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;how-i-deploy-calibre-web-and-tweak-it&#x2F;.&#x2F;advocate.png&quot; alt=&quot;advocate README&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Okey, why can&#x27;t I replace it with &lt;code&gt;requests&lt;&#x2F;code&gt;? I checked&lt;code&gt;calibre-web&lt;&#x2F;code&gt; and found &lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;how-i-deploy-calibre-web-and-tweak-it&#x2F;.&#x2F;helper.png&quot; alt=&quot;requests&quot; &#x2F;&gt;. That what I need exactly, so I wrote a small script which can help me replace &lt;code&gt;advocate&lt;&#x2F;code&gt; with &lt;code&gt;requests&lt;&#x2F;code&gt; and put it into &lt;code&gt;&#x2F;config&#x2F;custom-cont-init.d&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!&amp;#x2F;bin&amp;#x2F;bash

echo &amp;quot;**** patching calibre-web - removing advocate for proxy ****&amp;quot;
sed -i &amp;quot;s&amp;#x2F;import advocate&amp;#x2F;raise ImportError(\&amp;quot;no advocate\&amp;quot;)&amp;#x2F;&amp;quot; &amp;#x2F;app&amp;#x2F;calibre-web&amp;#x2F;cps&amp;#x2F;helper.py
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Though cover uploads will failed due to absence of &lt;code&gt;advocate&lt;&#x2F;code&gt;, but check the error message, it&#x27;s at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;janeczku&#x2F;calibre-web&#x2F;blob&#x2F;68e21e1098aab8dcbfcf024cc296bc43936bfe3c&#x2F;cps&#x2F;helper.py#L811&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;janeczku&#x2F;calibre-web&#x2F;blob&#x2F;68e21e1098aab8dcbfcf024cc296bc43936bfe3c&#x2F;cps&#x2F;helper.py#L811&lt;&#x2F;a&gt;, we can add an environment variable &lt;code&gt;CALIBRE_LOCALHOST=1&lt;&#x2F;code&gt; which solve this problem.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;i-ll-reclaim-my-lost-souls&quot;&gt;I&#x27;ll reclaim my lost souls.&lt;&#x2F;h1&gt;
&lt;p&gt;Bulk add through web interface seems amazing and complex, so it doesn&#x27;t have this feature. But remember what I&#x27;m using? It&#x27;s &lt;strong&gt;Calibre&lt;&#x2F;strong&gt;-web, it has the same library structure as Calibre.&lt;&#x2F;p&gt;
&lt;p&gt;I mounted the library folder on my laptop, open library with Calibre and add all my E-book collections into it. &lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s no better thing for both a bibliomaniac and a programmer, looking through all the books on the service I deployed.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;Fuck GFW.&lt;&#x2F;p&gt;
&lt;p&gt;And always remember that source code is your best friend.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;todo&quot;&gt;TODO&lt;&#x2F;h1&gt;
&lt;p&gt;There is still some improvement to be done, but don&#x27;t know where to start, I&#x27;ll update this article as soon as I have done that.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>像做项目一样做毕设</title>
		<published>2020-07-22T20:57:08+08:00</published>
		<updated>2020-08-07T02:01:26.830854+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/xiang-zuo-xiang-mu-yi-yang-zuo-bi-she/" type="text/html"/>
		<id>https://CSUwangj.github.io/xiang-zuo-xiang-mu-yi-yang-zuo-bi-she/</id>
		<content type="html">&lt;h1 id=&quot;xu-lun&quot;&gt;绪论&lt;&#x2F;h1&gt;
&lt;p&gt;整理自己在学校的东西，看到自己为了毕业设计开的项目，觉得自己的这份经验值得分享一下，所以整理一下发出来，帮助学弟学妹开始自己的毕设。&lt;&#x2F;p&gt;
&lt;p&gt;本文主要分为两个部分，一个是工作流，另一个是小技巧：工作流包括了我从联系导师、确认选题到最后完成设计、申请推优的大流程；小技巧则是我认为在毕设过程中提升了我工作效率的一些设计、软件。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;gong-zuo-liu&quot;&gt;工作流&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;xuan-ti-yu-lian-xi-dao-shi&quot;&gt;选题与联系导师&lt;&#x2F;h2&gt;
&lt;p&gt;选题的来源就是自己定和让老师给两种，如果保研或者自己早有想法大概就是前者了。有想法以后可以尽早联系觉得合适的导师，看看是否还有位置&#x2F;任务工作量是否合适。导师如果愿意留位置给你那还需要记得隔段时间和老师确认一下，如果老师到时候给忘了就有点尴尬了。让老师给任务的也可以早点联系老师，了解一下任务相关的东西（不了解感觉问题也不大，只要毕个业的话）。&lt;&#x2F;p&gt;
&lt;p&gt;然后就是等毕设正式开始的时间了，大概就是大四上学期期末的时候，导师就会把带的学生拉一起，说一下关键时间节点，官方要注意的时间节点就是中期检查和上交终稿的时间，依据这个各个导师有自己的安排，比如什么时候完成调研报告、什么时候要把设计主题完成了、什么时候论文初稿要出来、要不要开周会什么的。&lt;&#x2F;p&gt;
&lt;p&gt;我当时是考虑了三个选题，一个是密码学实验的整个系统，一个是markdown转word文档的工具，最后一个是匿名投票系统，这三个选题都是在大学里遇到的问题，因为其中两个都是密码学相关的，所以我早早联系了密码学老师，一通分析以后也觉得这几个应该都是谋个良毕业无压力的任务，最后想着挑战一下自己顺便多学点知识选了第三个（因为前两个都已经做出来了）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;diao-yan-bao-gao&quot;&gt;调研报告&lt;&#x2F;h2&gt;
&lt;p&gt;调研报告基本可以认为是毕业论文第一章的展开版本，导师和我们表达的观点是“把调研报告扩写成论文”。调研报告或者说论文的第一章，基本就是引用参考文献的出处了，后面几章能新引用的参考文献屈指可数，所以如果写完调研报告发现参考文献引用的太少就赶紧看怎么找补吧。&lt;&#x2F;p&gt;
&lt;p&gt;写调研报告也是了解研究领域、思考工作方向的重要一环，只要不是自己已经深耕过的领域，这时候应该是收获最大的时间。可以先搜几篇调研&#x2F;survey&#x2F;总结之类的文章，了解一下整个领域发展历史、常用的方法、各方法的利弊对比。比如我做的匿名投票就是找了《A survey of different electronic voting systems》，如果找不到类似的东西也不用紧张，大可以搜几篇论文看看，因为论文开头的研究现状里追溯领域的发展过程的不算少见。&lt;&#x2F;p&gt;
&lt;p&gt;考虑自己工作方向的时候可以参考国内的硕士毕业论文（毕竟看不到本科生的），在那个难度上做一些简化，考虑一下别人没有做的方向，毕竟科研就是排列组合（暴论）。继续拿我自己举例，我就是看了2008年彭珊珊的硕士毕业论文以后，考虑像她一样的在已有协议上进行优化，她有用软件做形式化的分析，而我这方面能力不足但是开发能力还不错，我就做一个开源的电子投票系统。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;也听说有的人先随便糊一版调研报告，最后拿毕业论文的第一章替换调研报告的，但是说往年这么干的已经被打爆了。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiang-mu-kai-fa&quot;&gt;项目开发&lt;&#x2F;h2&gt;
&lt;p&gt;就我校的要求来说，作为一个计算机院毕业生，毕业设计没有代码相关的东西是不太可能不被刁难的，所以先做好准备吧。也未必每个毕业设计都需要做一个工程，也有做实验的、做仿真模拟的，但总之是不能拿个PPT就过答辩的。&lt;&#x2F;p&gt;
&lt;p&gt;项目开发最好能从调研报告了解完现状就开始，因为作为一个本科生来说，能在已有的东西上做个微创新就已经算不错了，已有的系统通常也不是那么好加东西的。这里就看研究的方向了，首先看有没有能直接拿来改了用的开源软件（这里呼吁用了别人开源代码的遵循开源协议），如果没有，那再看有没有比较小的合适的系统可以大段大段地复制，如果还没有，那再看看有没有可以参考架构的，如果依然没有，那最好做好最后只能靠仿真出结果的准备了。对于可能用到的组件也是一样的，尤其是那种单独拎出来都可以写一篇论文的组件，一定要尽早调研清楚情况。&lt;&#x2F;p&gt;
&lt;p&gt;就我的情况来说，找到了几个开源的投票系统，一个是主要用Java开发的IVXV，一个是golang写的cryptoballot（在我调研完一个月突然推了两年的更新现在变成rust的了）。前者协议就和主流不太一样，所以只是分析了一下B&#x2F;C的架构；后者小而且算是有了一版完整的demo，于是我仔细研究了一下它的架构，然后放弃了写go屎的念头，用rust写了自己的系统。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bi-ye-lun-wen&quot;&gt;毕业论文&lt;&#x2F;h2&gt;
&lt;p&gt;毕业论文和项目开发可以半同步进行，在设计架构的时候就顺便把毕业论文的系统设计给写了，在写代码的时候顺便写一写详细设计，回过头来编的时候心里会更踏实（回来编还是必要的，毕竟写代码的时候我憋不出那么多字）。&lt;&#x2F;p&gt;
&lt;p&gt;毕业论文和调研报告能有参考是最好的，能找老师要一个前人的论文是最好的，注意抄格式的时候看一下类型，有的人的毕业设计是做系统（开发）的，有的人的设计是做调研的，有的是两者皆有的，综合考虑确定自己论文的分节。&lt;&#x2F;p&gt;
&lt;p&gt;个人写论文的时候没有遇到降重的问题，个人感觉只要写论文的时候不要打开其他论文就基本不会有这个问题，如果要参考就先看一下别人的主体意思，然后关了窗口自己复述一遍，基本就没有问题了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;da-bian-yu-shen-qing-tui-you&quot;&gt;答辩与申请推优&lt;&#x2F;h2&gt;
&lt;p&gt;答辩的PPT最好能打一个稿子，自己排练几遍，把握住时间语速什么的，系统展示建议用视频录制，如果要实操也准备一份视频备用，实操最好能有自动化的流程比如用脚本，如果没有脚本也提前给自己打个时间轴&#x2F;备忘。&lt;&#x2F;p&gt;
&lt;p&gt;答辩结束后就是推优了，优秀论文在我这里似乎没什么用（据说我院不仅没有奖状甚至连个通报都没有），申请就是让我把论文复制了一份删了大半东西。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;xiao-ji-qiao&quot;&gt;小技巧&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;shi-yong-git&quot;&gt;使用git&lt;&#x2F;h2&gt;
&lt;p&gt;使用版本控制工具最大的好处就是我能写这篇文章的原因，因为很方便进行复盘。这一点对志在读研、科研的同学来说应该是比较有意义的，对于以后可能要做自己微创新的同学来说可能也是有所帮助了。此外用了git以后还能很方便地进行备份，毕竟这个工具就是本职工作要用的，理应很熟悉。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bei-fen-3-2-1yuan-ze&quot;&gt;备份：3-2-1原则&lt;&#x2F;h2&gt;
&lt;p&gt;毕业设计的相关资料毫无疑问算是重要的资料了，重要资料的备份遵循3-2-1原则：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;3指三份存储，即一份主存和两份备份。&lt;&#x2F;li&gt;
&lt;li&gt;2指备份在两种介质上，机械硬盘、SSD、光盘、磁带、U盘甚至手机，选择适合自己的介质备份。&lt;&#x2F;li&gt;
&lt;li&gt;1指有一份是备份在远端。因为使用了git，所以这一步挺好做的，你甚至可以在GitHub建一个私有repo推上去（我就是这么干的）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;shi-yong-bi-ji-guan-li-can-kao-wen-xian-guan-li-ruan-jian&quot;&gt;使用笔记管理&#x2F;参考文献管理软件&lt;&#x2F;h2&gt;
&lt;p&gt;读论文和做笔记总是息息相关的，所以这两个拉一起说也是应该的。&lt;&#x2F;p&gt;
&lt;p&gt;做一个研究之前大概都是要通读不少论文的吧，我个人来说是先读了十五篇左右的论文了解了现有的研究与现有的系统，在确认方向以后又专门看了十多篇盲签名电子投票系统相关的论文，写调研报告的时候为了凑字数又去总结了十多篇其他电子投票系统方案的论文。读论文自然有精读和略读之分，精读和略读做的笔记也不一样。这里因为一来我其实没怎么做研究经验不足，二来笔记也比较乱，就不分享我个人的经验了，推荐大家搜一下知乎，这里推荐几篇：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;37779411&quot;&gt;对于读文献，你有哪些愿意分享的技巧？&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;47024495&quot;&gt;知乎上关于读论文的技巧及工具整理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;304334959&quot;&gt;研究生新生要怎么看论文？&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;duo-shi-yong-zi-dong-hua-gong-ju&quot;&gt;多使用自动化工具&lt;&#x2F;h2&gt;
&lt;p&gt;作为计算机专业的同学，自然要尽量把一些可能重复的任务变成自动化的工作。比如我为了论文就写了一个md2docx，写了一个自动重排引用序号的程序，把论文的格式问题处理自动化了大半。&lt;&#x2F;p&gt;
&lt;p&gt;还有一些显而易见的地方，比如自动化备份（可以用定时git commit -m + git push），工程的自动构建（CI&#x2F;CD）。&lt;&#x2F;p&gt;
&lt;p&gt;自动化的工具也要考虑时间成本，你当然不应该为了每周一次，每次一分钟的任务花上半天来写一个工具。也要多看看有没有现成的工具，比如参考文献生成器、参考文献引用都已经有很好的工具了（前者找个网站，后者谷歌学术用中文就有GB标准）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xie-ri-zong-jie&quot;&gt;写日总结&lt;&#x2F;h2&gt;
&lt;p&gt;一个是方便有周会的同学写周报，另一个有日总结以后会对进度有更好的把握。这里推荐在每晚睡前写一下日总结和明日计划，总结部分包括工作、问题和学习。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How to recover DES master key from round key</title>
		<published>2019-11-09T22:13:16+08:00</published>
		<updated>2020-08-07T02:01:26.830854+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/how-to-recover-des-master-key-from-round-key/" type="text/html"/>
		<id>https://CSUwangj.github.io/how-to-recover-des-master-key-from-round-key/</id>
		<content type="html">&lt;p&gt;$1# TLDR&lt;&#x2F;p&gt;
&lt;p&gt;Reverse the picking(or called compressing) process where extract round key from part of master key to get most of master key(56bits), use parity to recover last 8bits.&lt;&#x2F;p&gt;
&lt;p&gt;If the dumbass&#x2F;fuckhead&#x2F;shithead who created this question forgot or not known parity, just fuck it.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;we-got-the-key&quot;&gt;We Got the Key!&lt;&#x2F;h1&gt;
&lt;p&gt;I came across this problem when I participated in one shity CTF.&lt;&#x2F;p&gt;
&lt;p&gt;Here goes problem:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pyDes
import base64
deskey = &amp;quot;********&amp;quot;
DES = pyDes.des(deskey)
DES.setMode(&amp;#x27;ECB&amp;#x27;)
DES.Kn = [
			[1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0],
			[1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0], 
			[0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0],
			[1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], 
			[0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
			[0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],
			[0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0],
			[0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0],
			[0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
			[0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0],
			[0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
			[0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0],
			[1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0],
			[1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1],
			[1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1],
			[1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1]
		]
#cipher_list = base64.b64encode(DES.encrypt(mes))
cipher_list= &amp;quot;gAN5RT1XWKI0OyUayZj35SlKQ+if2PAJ&amp;quot;
#flag = mes+deskey
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I checked &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;twhiteman&#x2F;pyDes&#x2F;blob&#x2F;master&#x2F;pyDes.py&quot;&gt;pyDes&lt;&#x2F;a&gt; and found it a normal implementation, so problem is easy, add one more line to decrypt the cipher, recover master key from round keys.&lt;&#x2F;p&gt;
&lt;p&gt;So we don&#x27;t have to care about how DES encrypt data, but how these round key are generated.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;des-key-schedule&quot;&gt;DES key schedule&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;drop-parity&quot;&gt;drop parity&lt;&#x2F;h2&gt;
&lt;p&gt;Firstly, we have 64 bits key, every byte should have odd parity.&lt;&#x2F;p&gt;
&lt;p&gt;So we would let key go through permuted choice one, where we drop 8th bit of every byte.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;key = [0] * 64 # 64bit key
pc1 = [
  56, 48, 40, 32, 24, 16,  8,
  0, 57, 49, 41, 33, 25, 17,
  9,  1, 58, 50, 42, 34, 26,
 18, 10,  2, 59, 51, 43, 35,
 62, 54, 46, 38, 30, 22, 14,
  6, 61, 53, 45, 37, 29, 21,
 13,  5, 60, 52, 44, 36, 28,
 20, 12,  4, 27, 19, 11,  3
]
mid_key = list(map(lambda x: key[x], pc1))
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;derive-round-key&quot;&gt;derive round key&lt;&#x2F;h2&gt;
&lt;p&gt;We chopped mid key into two even part, every round left shift it and let it go through permuted choice two, which compress 56 bit into 48 bit.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;left_rotations = [
    1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1
]
pc2 = [
	13, 16, 10, 23,  0,  4,
	 2, 27, 14,  5, 20,  9,
	22, 18, 11,  3, 25,  7,
	15,  6, 26, 19, 12,  1,
	40, 51, 30, 36, 46, 54,
	29, 39, 50, 44, 32, 47,
	43, 48, 38, 55, 33, 52,
	45, 41, 49, 35, 28, 31
]

L = mid_key[:28]
R = mid_key[28:]

round_key = []

for i in range(len(left_rotation)):
    for j in range(left_rotation[i]):
        L = L[1:] + L[:1]
        R = R[1:] + R[:1]
    round_key.append(list(map(lambda x: (L+R)[x], pc2)))
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;reverse-it&quot;&gt;Reverse it&lt;&#x2F;h1&gt;
&lt;p&gt;We could get only 48 out of 56 bits, does it mean that we need to use brute force to get last 8 bits?&lt;&#x2F;p&gt;
&lt;p&gt;Off course not! We got 16 round keys, Which means we actually got every bit of 56-bit-key.&lt;&#x2F;p&gt;
&lt;p&gt;We just need rerun the key assign process, to a opposite direction.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# Extract part of master key from round key
mid_key = [-1] * 56 # -1 for key not appeared
for i in range(len(left_rotation)):
  for j in range(left_rotation[i]):
    mid_key = mid_key[1:28] + mid_key[:1] + mid_key[29:] + mid_key[28:29]
  for k in range(len(pc2)):
    if mid_key[pc2[k]] != -1 and mid_key[pc2[k]] != round_key[i][k]:
      print(&amp;quot;This should not happen!&amp;quot;)
    mid_key[pc2[k]] = round_key[i][k]

# Reverse permute process of dropping parity

key = [-1] * 64
for i in range(len(pc1)):
  key[pc1[i]] = mid_key[i]

# Recover master key according to parity
for i in range(8):
  sum = 0
  for j in range(7):
    sum += key[i*8+j]
  key[i*8+7] = 1 - sum % 2

# Print key ascii
print(&amp;#x27;&amp;#x27;.join([chr(int(key[i:i+8],2)) for i in range(0, len(key), 8)]))
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>编程是很好玩的--md2docx是怎么写出来的</title>
		<published>2019-08-19T21:18:08+08:00</published>
		<updated>2020-08-07T01:54:43.014672+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de/" type="text/html"/>
		<id>https://CSUwangj.github.io/bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de/</id>
		<content type="html">&lt;p&gt;花
花了一个多月写了一个工具，写一点东西帮助想重新造轮子的朋友~&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;我在上个月花了半个月的时间补充相关知识后，在这个月花了几天时间写出了一个将给定 markdown 按照一定格式渲染成 .docx 文件的工具，代码已经开源在&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CSUwangj&#x2F;md2docx-csharp&quot;&gt;github&lt;&#x2F;a&gt;上。但是这个项目目的只是给中南信安学子使用，而且封面格式只按照某个老师的要求来的，如果有定制的需求，还是需要自己动手，那么这里就写一篇文章简单介绍一下完成这个过程中可能用到的资料、工具和可能踩到的坑。&lt;&#x2F;p&gt;
&lt;p&gt;行文中会将用到的资源用超链接放在里面，但为了方便，也会在末尾用&lt;a href=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;#can-kao-zi-liao&quot;&gt;一个列表&lt;&#x2F;a&gt;把资料列出来。&lt;&#x2F;p&gt;
&lt;p&gt;文章会先介绍 .docx文件和 markdown，是相对比较底层的简单介绍，如果只是关心程序是如何完成的，则完全可以跳过这部分。然后文章会介绍实现里的一些细节，我的实现用了 C#，开发时用的是 Visual Studio，使用的库为 Microsoft.Community.Toolkit（markdown parser）和 Open XML SDK（操作.docx文件）。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;docx-wen-jian-jie-xi&quot;&gt;.docx 文件解析&lt;&#x2F;h1&gt;
&lt;p&gt;.docx 这个后缀所对应的文件格式全写是 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Office_Open_XML_file_formats&quot;&gt;Office Open XML&lt;&#x2F;a&gt;。实质上就是一个包含了一系列有一定结构的 xml 文件的zip包，只需修改后缀名就可以用通用的解压软件将其解压并观察到里面的结构。&lt;&#x2F;p&gt;
&lt;p&gt;正如在维基页面所示，Office Open XML 对应了几种文件格式，分别是document, presentation, workbook，也就是我们常说的word, ppt, excel。在 Office Open XML 文件里，会用到几种不同的标识语言，有兴趣的在维基页面可以进一步了解。基于以上信息，不难想到我们最主要需要了解是 Office Open XML document 的文件格式，和其中被大量用到的 WordprocessingML 语言。从这一步开始，维基页面上的内容就比较深入并且主要由各种标准文件组成，从这里开始我推荐从&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;office&#x2F;open-xml&#x2F;structure-of-a-wordprocessingml-document&quot;&gt;微软的文档&lt;&#x2F;a&gt;或者&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;officeopenxml.com&#x2F;anatomyofOOXML.php&quot;&gt;officeopenxml.com&lt;&#x2F;a&gt;，如果倾向看视频了解并且不介意英文视频，那么可以考虑&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ericwhite.com&#x2F;blog&#x2F;introduction-to-wordprocessingml-series&#x2F;&quot;&gt;Eric 的博客&lt;&#x2F;a&gt;，他是曾经在微软开发 Open XML SDK 的开发人员，并且离职以后依然在空闲时间继续这方面的工作。在这一节的末尾将会简单介绍 Open XML SDK，在&lt;a href=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;#bian-cheng-shi-xian&quot;&gt;之后的章节&lt;&#x2F;a&gt;展开介绍。&lt;&#x2F;p&gt;
&lt;p&gt;为了完成我们的目标，Office Open XML 中各组成部分最主要需要关注的是 Main Document、Style Definitions，若是需要页眉、页脚，则还需要 Header、Footer 这两个部分。其他没有提及的内容并非无意义，而只是与目标相关性没有这么高，所以有需要的请自行翻阅文档。剩下不会继续介绍的部分有 Comments、Document Settings、Endnotes、Footnotes、Glossary Document。&lt;&#x2F;p&gt;
&lt;p&gt;Style Definitions 包含了和格式相关的各种东西，仅仅从复用的角度来说，也应当将格式作为存入这里而不是设置一个可以把某一段变成某种格式的函数。具体如何操作这部分的内容来达到我们所需的效果将在&lt;a href=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;#can-kao-zi-liao&quot;&gt;之后&lt;&#x2F;a&gt;具体说。其中除了寻常可见的各种格式如正文、多级标题之外，还有一种特殊的元素值得留意，就是 latentStyles。Office 内置了相当多的格式（大概200多种），如果每一个格式都将其存放在每一个文档里，显然是没必要的，但是也不能就将其直接删去让软件自己从自己的库里读取，这也就是 latentStyles 起作用的地方。原文说的是&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;延迟样式&lt;&#x2F;em&gt;引用任何一组已知的应用程序的未包括在当前文档中的样式定义。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Main Document 是一个文档所需的最基本的内容，在里面设置正文的各种内容、格式。这里可以简单介绍的是，正文的最基本的构成内容是 Paragraph，在 xml 中用 &amp;lt;p&amp;gt; 节点表示，每个 Paragraph 都会包含对应的段落格式（用 &amp;lt;pPr&amp;gt; 节点表示），文字块和一些其他可选的属性。我们直接创建的 word 文档中，段落格式通常是基于某个已有的格式加上一些其他的选项。既然 Paragraph 是以行分隔的，那么具体到中间某些文字需要区别于段落的格式，也就必然需要单独的一个对象来表示，也就是文字块 Run。Run 在 xml 中用 &amp;lt;r&amp;gt; 节点表示，其格式用 &amp;lt;rPr&amp;gt; 表示。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;markdown-de-qu-bie&quot;&gt;markdown 的区别&lt;&#x2F;h1&gt;
&lt;p&gt;markdown 是一种标志语言，所谓标致语言，根据维基的说法&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;是一种将文本（Text）以及文本相关的其他信息结合起来，展现出关于文档结构和数据处理细节的计算机文字编码。与文本相关的其他信息（包括例如文本的结构和表示信息等）与原来的文本结合在一起，但是使用标记（markup）进行标识。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;既然要处理它，那么我们同样要找到它的标准才行。&lt;&#x2F;p&gt;
&lt;p&gt;但是很可惜，直接叫 markdown 的标准严格意义上并不存在，这里的原因是作者对于在“markdown”这个名字上进行标准的强烈反对，原因是作者认为&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I believe Markdown’s success is &lt;em&gt;due to&lt;&#x2F;em&gt;, not in spite of, its lack of standardization. And its success is not disputable.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;当然，即便是这样说了，为了继续推广、应用，自然就会有各家做出自己的定义，其中据我了解比较流行的标准有&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;commonmark.org&#x2F;&quot;&gt;CommonMark&lt;&#x2F;a&gt;和&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.github.com&#x2F;gfm&#x2F;&quot;&gt;Github Flavored Markdown(GFM)&lt;&#x2F;a&gt;，除此之外，正如 markdown 的发展一样，除了这些标准以外还有许多个人实现的、组织开发的拓展，用于丰富 markdown 的表达形式（所以作者对标准化的反对也可以理解）。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;bian-cheng-shi-xian&quot;&gt;编程实现&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;shi-xian-si-lu&quot;&gt;实现思路&lt;&#x2F;h2&gt;
&lt;p&gt;要做的东西就是一个 markdown render，就是将 markdown 文档中的每个元素映射到固定的 .docx 文档组成部分。因为已经选定了 Open XML SDK，而最新的只支持 C#，所以问题就是要找个现有的 parser（毕竟我暂时还不想写个 parser 来复习编译原理）。parser 在这个工程中是相当重要的，因为 parser 确定以后，能支持的语法类型定了，markdown 能表达的格式也就定了，表达能力也就有了一个限制。同时这也是我踩的一个大坑，导致增加了之后重构所需的工作量。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;markdown-parser&quot;&gt;markdown parser&lt;&#x2F;h2&gt;
&lt;p&gt;因为搜索时不够细致，我错误地采用了 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;windows-toolkit&#x2F;WindowsCommunityToolkit&quot;&gt;Microsoft.Community.Toolkit&lt;&#x2F;a&gt; 中的 markdown parser，且不提支持的语法不够丰富，最令我无法忍受的是它居然不认为标题的&lt;code&gt;#&lt;&#x2F;code&gt;后面需要加个空格！但是当我发现这一点的时候已经晚了，工具已经到了0.9版。&lt;&#x2F;p&gt;
&lt;p&gt;不过也有一个好事，大概可能也许是因为打着微软的名头，尽管是社区维护的包，&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;microsoft.toolkit.parsers.markdown?view=win-comm-toolkit-dotnet-stable&quot;&gt;文档&lt;&#x2F;a&gt;是十分详细的。&lt;&#x2F;p&gt;
&lt;p&gt;简单来说，这个 parser 认为 markdown 由 MarkdownBlock 构成，MarkdownBlock 分为&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeBlock&lt;&#x2F;li&gt;
&lt;li&gt;HeaderBlock&lt;&#x2F;li&gt;
&lt;li&gt;HorizontalRuleBlock&lt;&#x2F;li&gt;
&lt;li&gt;LinkReferenceBlock&lt;&#x2F;li&gt;
&lt;li&gt;ListBlock&lt;&#x2F;li&gt;
&lt;li&gt;ParagraphBlock&lt;&#x2F;li&gt;
&lt;li&gt;QuoteBlock&lt;&#x2F;li&gt;
&lt;li&gt;TableBlock&lt;&#x2F;li&gt;
&lt;li&gt;YamlHeaderBlock&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;QuoteBlock 中包含的依然是 Block，如果有用的话会比较难处理；ListBlock 包含的也是 Block，不过我理解来ListBlock 只应该包含列表，所以不算很棘手；YamlHeaderBlock 有且仅有一块并且一定放在头部的位置，获得的是一个&lt;code&gt;Dictionary&amp;lt;string, string&amp;gt;&lt;&#x2F;code&gt;；HorizontalRuleBlock 就一水平线； CodeBlock 中只有纯文本，以及编程语言的名称，只要不是想渲染彩色代码，也不难做。LinkReferenceBlock、TableBlock 我没有用到，所以这里掠过。 ParagraphBlock、HeaderBlock 由 MarkdownInline 构成，这里大概可以类比成 .docx 文档里段落和文字块的关系。MarkdownInline 分为&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;BoldTextInline&lt;&#x2F;li&gt;
&lt;li&gt;CodeInline&lt;&#x2F;li&gt;
&lt;li&gt;EmojiInline&lt;&#x2F;li&gt;
&lt;li&gt;HyperlinkInline&lt;&#x2F;li&gt;
&lt;li&gt;ImageInline&lt;&#x2F;li&gt;
&lt;li&gt;ItalicTextInline&lt;&#x2F;li&gt;
&lt;li&gt;LinkAnchorInline&lt;&#x2F;li&gt;
&lt;li&gt;MarkdownLinkInline&lt;&#x2F;li&gt;
&lt;li&gt;StrikethroughTextInline&lt;&#x2F;li&gt;
&lt;li&gt;SubscriptTextInline&lt;&#x2F;li&gt;
&lt;li&gt;SuperscriptTextInline&lt;&#x2F;li&gt;
&lt;li&gt;TextRunInline&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;通过以上关系，我考虑得到的结果是下面这个图&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;design.jpg&quot; alt=&quot;Correspondence&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;处理嵌套、交错的 MarkdownInline 其实挺简单，只需要一个简单的 DFS，遇到新的非 TextRunInline 的话就加上心的格式，然后继续DFS。下面是一个简单的示例代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c#&quot; class=&quot;language-c# &quot;&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&amp;#x2F;&amp;#x2F; 输出嵌套的类HTML样子的（伪）渲染效果
static void dfs(MarkdownInline inline)
{
    if (inline is TextRunInline txt)
    {
        Console.Write($&amp;quot;txt{txt.Text}&amp;quot;);
    }
    else if (inline is CodeInline code)
    {
        Console.Write($&amp;quot;code{code.Text}&amp;quot;);
    }
    else if (inline is BoldTextInline bd)
    {
        foreach(var e in bd.Inlines)
        {
            Console.Write(&amp;quot;&amp;lt;Bold&amp;gt;&amp;quot;);
            dfs(e);
            Console.Write(&amp;quot;&amp;lt;&amp;#x2F;Bold&amp;gt;&amp;quot;);
        }
    }
    else if (inline is ItalicTextInline it)
    {
        foreach(var e in it.Inlines)
        {
            Console.Write(&amp;quot;&amp;lt;Italic&amp;gt;&amp;quot;);
            dfs(e);
            Console.Write(&amp;quot;&amp;lt;&amp;#x2F;Italic&amp;gt;&amp;quot;);
        }
    }
    else if (inline is StrikethroughTextInline st)
    {
        foreach (var e in st.Inlines)
        {
            Console.Write(&amp;quot;&amp;lt;Strike&amp;gt;&amp;quot;);
            dfs(e);
            Console.Write(&amp;quot;&amp;lt;&amp;#x2F;Strike&amp;gt;&amp;quot;);
        }
    }
    else if (inline is SubscriptTextInline ss)
    {
        foreach (var e in ss.Inlines)
        {
            Console.Write(&amp;quot;&amp;lt;Subs&amp;gt;&amp;quot;);
            dfs(e);
            Console.Write(&amp;quot;&amp;lt;&amp;#x2F;Subs&amp;gt;&amp;quot;);
        }
    }
    else if (inline is SuperscriptTextInline sp)
    {
        foreach (var e in sp.Inlines)
        {
            Console.Write(&amp;quot;&amp;lt;Super&amp;gt;&amp;quot;);
            dfs(e);
            Console.Write(&amp;quot;&amp;lt;&amp;#x2F;Super&amp;gt;&amp;quot;);
        }
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在处理思路也有了，对应关系也找了，接下来再把操作 .docx 文件解决了这个软件也就完成了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;open-xml-sdk&quot;&gt;Open XML SDK&lt;&#x2F;h2&gt;
&lt;p&gt;Open XML SDK 是由微软开发维护的用于在 Office Word, Excel, and PowerPoint 上进行编程的工具，整个 SDK 已经开源在 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;OfficeDev&#x2F;Open-XML-SDK&quot;&gt;github&lt;&#x2F;a&gt; 上。至于文档，则如 README 所言&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The functionality of the specific classes in this version of the Open XML SDK is similar to version 2.5, therefore the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;office&#x2F;bb448854.aspx&quot;&gt;Open XML SDK 2.5 for Office&lt;&#x2F;a&gt; documentation available on MSDN is still accurate.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to open sourcing of the SDK, Microsoft has opened up the conceptual documentation for public review &#x2F; contributions. A copy of the documentation is available for you to edit and review &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;OfficeDev&#x2F;office-content&quot;&gt;in GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这里要再吹一下 MSDN 的文档，在习惯之后感觉真好用。&lt;&#x2F;p&gt;
&lt;p&gt;有了文档以后还需要一些例子，这里有&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;office&#x2F;open-xml&#x2F;working-with-paragraphs&quot;&gt;微软的例子&lt;&#x2F;a&gt;，另一个是 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;EricWhiteDev&#x2F;Open-Xml-PowerTools&quot;&gt;Github上的例子&lt;&#x2F;a&gt;。除了这两个以外，一定要强烈推荐的是 Open XML SDK 2.5 Productivity Tool，这个工具通过&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;download&#x2F;details.aspx?id=30425&quot;&gt;微软下载中心&lt;&#x2F;a&gt;下载。这个工具可以将现有的 .docx\.pptx\.xlsx 文件转换为可以直接生成等价文件的 C# 代码，并且还可以顺便查看对应结构的文档。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;P.jpg&quot; alt=&quot;generated code&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;PD.jpg&quot; alt=&quot;documentation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;于是思路和例子都有了，甚至可以对着抄的例子都有了，接下来需要的东西就是粘合和重构了。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;qi-ta-si-lu&quot;&gt;其他思路&lt;&#x2F;h1&gt;
&lt;p&gt;解析 Markdown 这里自然不必多说，不论已经有的那么多轮子，就算从头写一个 Parser 也不是太大的负担，主要考虑的还是操作 .docx 文件这一重。&lt;&#x2F;p&gt;
&lt;p&gt;Eiric White 在博客中提到了了 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ericwhite.com&#x2F;blog&#x2F;open-xml-sdk-for-javascript&#x2F;&quot;&gt;Open XML SDK for JavaScript&lt;&#x2F;a&gt;，不过里面相关的资料还有不少在建设当中，不知道具体情况如何。&lt;&#x2F;p&gt;
&lt;p&gt;其次 python 有一个包叫做 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;python-docx.readthedocs.io&#x2F;en&#x2F;latest&#x2F;&quot;&gt;python-docx&lt;&#x2F;a&gt;，实现了不小的一部分 Open XML 相关的操作，可惜貌似连设置中文字体都需要 hook 到比较底层的实现，不是很优雅的选择，而且没有保障，所以如果需要用到中文建议还是跳过这个选择把（不过看这篇文章的会有非中文文档的需求吗）。&lt;&#x2F;p&gt;
&lt;p&gt;除此之外就剩下两个比较底层的做法：&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;com&#x2F;component-object-model--com--portal&quot;&gt;COM Programming&lt;&#x2F;a&gt; 和 直接操作 XML。&lt;&#x2F;p&gt;
&lt;p&gt;除了原生支持的 VC、VB 以外，已经有多种语言对 COM 做了封装，其中包括比较常见的 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;jacob-project&#x2F;&quot;&gt;Java&lt;&#x2F;a&gt;、&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;pywin32&#x2F;&quot;&gt;python&lt;&#x2F;a&gt;、&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;win32com&quot;&gt;JavaScript&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;另一个正如前文所说，.Open XML 文件实质上就是一个包含了一系列有一定结构的 xml 文件的zip包，那么只需要操作多个 xml 文件，最后将其打包也就完成了。如果这里有需求，可以参考 Open XML 相关的文档。各语言大部分都有 zip、xml 相关的库，这里也就不再赘述。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;hou-xu-gong-zuo&quot;&gt;后续工作&lt;&#x2F;h1&gt;
&lt;p&gt;我自己的软件算是做出了一个 Minimum Viable Product，还有很多不足，接下来我打算利用空闲时间做以下工作。（如果被开了就全职一下，嘤）&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;加入测试（但是目前怎么测试我还没想好，可能参考 Open-Xml-PowerTools 里的测试），顺便重构&lt;&#x2F;li&gt;
&lt;li&gt;搭 CI&lt;&#x2F;li&gt;
&lt;li&gt;更换 markdown parser&lt;&#x2F;li&gt;
&lt;li&gt;将输出格式设置从硬编码改为 json（但是坦白说目前还没想好怎么处理类似封面、页眉、页脚、摘要之类的东西）&lt;&#x2F;li&gt;
&lt;li&gt;加入页眉、页脚&lt;&#x2F;li&gt;
&lt;li&gt;加入图片、图题&lt;&#x2F;li&gt;
&lt;li&gt;加入表格&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Office Open XML
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Office_Open_XML_file_formats&quot;&gt;wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ericwhite.com&#x2F;blog&#x2F;introduction-to-wordprocessingml-series&#x2F;&quot;&gt;Introduction to WordprocessingML Series&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;office&#x2F;open-xml&#x2F;structure-of-a-wordprocessingml-document&quot;&gt;微软文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;officeopenxml.com&#x2F;anatomyofOOXML.php&quot;&gt;officeopenxml.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Markdown
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;commonmark.org&#x2F;&quot;&gt;CommonMark&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.github.com&#x2F;gfm&#x2F;&quot;&gt;Github Flavored Markdown(GFM)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;microsoft.toolkit.parsers.markdown?view=win-comm-toolkit-dotnet-stable&quot;&gt;Microsoft.Toolkit.Parsers文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;windows-toolkit&#x2F;WindowsCommunityToolkit&#x2F;blob&#x2F;090542f0fdd0aeeabb6140316ff51da31afdbed2&#x2F;Microsoft.Toolkit.Uwp.SampleApp&#x2F;SamplePages&#x2F;MarkdownTextBlock&#x2F;InitialContent.md&quot;&gt;Microsoft.Toolkit.Parsers 对应的 Markdown 标准&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Open XML SDK
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;OfficeDev&#x2F;Open-XML-SDK&quot;&gt;GitHub repo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;office&#x2F;bb448854.aspx&quot;&gt;Open XML SDK 2.5 Documentataion&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;office&#x2F;open-xml&#x2F;working-with-paragraphs&quot;&gt;Microsoft Examples&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;EricWhiteDev&#x2F;Open-Xml-PowerTools&quot;&gt;Other Examples&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;download&#x2F;details.aspx?id=30425&quot;&gt;Open XML SDK 2.5 Productivity Tool&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Other
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ericwhite.com&#x2F;blog&#x2F;open-xml-sdk-for-javascript&#x2F;&quot;&gt;Open XML SDK for JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;python-docx.readthedocs.io&#x2F;en&#x2F;latest&#x2F;&quot;&gt;python-docx&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;com&#x2F;component-object-model--com--portal&quot;&gt;COM Programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;jacob-project&#x2F;&quot;&gt;JACOB - Java COM Bridge&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;pywin32&#x2F;&quot;&gt;pywin32&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;win32com&quot;&gt;npm - win32com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>ACM中一些常见的问题及原因</title>
		<published>2019-01-30T17:23:34+08:00</published>
		<updated>2020-08-07T01:54:42.988741+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin/" type="text/html"/>
		<id>https://CSUwangj.github.io/acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin/</id>
		<content type="html">&lt;p&gt;最近在 ACM 群灌水，顺便解决了一点问题，感觉可能会成为日经系列，寻思可以写个博文专门写写，正好也是对自己学习知识的检验。&lt;&#x2F;p&gt;
&lt;p&gt;我觉得这篇文章阅读方式可以按照《C语言常见问题集》，遇到问题了来看看也行，电脑阅读的时候右边应该会有个目录可以跳转，顺着读一遍也行。&lt;&#x2F;p&gt;
&lt;p&gt;文章只能慢慢更新，因为我并不想随意地对待这种难得的问题，然而工作在身并不能全身心投入。&lt;&#x2F;p&gt;
&lt;p&gt;以下内容如无特殊声明，采用C99和C++11标准。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;wei-shi-yao-zai-du-ru-de-shi-hou-bu-jia-jing-chang-hui-re-dan-shi-shu-zu-ming-bu-jia-jiu-mei-wen-ti&quot;&gt;为什么在读入的时候不加&amp;amp;经常会RE，但是数组名不加&amp;amp;就没问题？&lt;&#x2F;h1&gt;
&lt;p&gt;我们直接来看一段代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
    int a;
    scanf(&amp;quot;%d&amp;quot;, a);
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;编译运行的结果基本是&lt;code&gt;Segmentation fault (core dumped)&lt;&#x2F;code&gt;，如果是在windows上用codeblocks、devcpp之类的写的程序，多半会看到&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin&#x2F;1573525655820.png&quot; alt=&quot;1573525460495 %}或者{% asset_img 1573526342103.png 1573526342103 %}如果是devcpp，还可能是在一段时间的无响应后退出，同时返回值是一个大得惊人的数字{% asset_img 1573525655820.png 1573525655820&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里我们需要对比一下&lt;code&gt;a&lt;&#x2F;code&gt;和&lt;code&gt;&amp;amp;a&lt;&#x2F;code&gt;的区别，我们先直接把它们打印出来看一下。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
    int a;
    printf(&amp;quot;%x\n%x\n&amp;quot;, a, &amp;amp;a); 
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;%x&lt;&#x2F;code&gt;的意思是按十六进制打印，运行我们应该会看到类似如下的结果：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;➜  .&amp;#x2F;format
0  # 这里值不一定，也可能不是0
f35ab98c # 这里的值也不一定，但是通常会很大，比如这个十六进制转成十进制就是‭3759417480‬
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里我们再进一步，做一个测试，首先我们改写程序，其次用系统工具查看一下系统调用。&lt;&#x2F;p&gt;
&lt;p&gt;先介绍一下我们用到的工具：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;echo&lt;&#x2F;code&gt;是能将输入原样输出的一个程序，如果下面是一个运行的例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;➜  echo 12341234
12341234
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ltrace&lt;&#x2F;code&gt;是一个能跟踪库函数调用的工具，也就是说它能追踪到你程序调用的库里的类似&lt;code&gt;scanf&lt;&#x2F;code&gt;、&lt;code&gt;printf&lt;&#x2F;code&gt;这样的函数并且把调用函数的参数打印出来。&lt;&#x2F;p&gt;
&lt;p&gt;然后我们对下面这段程序使用上面写的工具，把&lt;code&gt;1234 1234&lt;&#x2F;code&gt;作为输入喂给程序。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
    int a;
    printf(&amp;quot;%d&amp;quot;, a);
    printf(&amp;quot;%d&amp;quot;, &amp;amp;a);
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;a);
    scanf(&amp;quot;%d&amp;quot;, a);
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;运行结果如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;➜  echo &amp;quot;1234 1234&amp;quot; | ltrace .&amp;#x2F;format
printf(&amp;quot;%d&amp;quot;, 0)                                             = 1
printf(&amp;quot;%d&amp;quot;, -787805524)                                    = 10
__isoc99_scanf(0x7fa859609004, 0x7fffd10b0aac, 0x7fa85959d8c0, 0) = 1
__isoc99_scanf(0x7fa859609004, 1234, 0x7fa85959d8d0, 16 &amp;lt;no return ...&amp;gt;
--- SIGSEGV (Segmentation fault) ---
+++ killed by SIGSEGV +++
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们可以看到，&lt;code&gt;printf&lt;&#x2F;code&gt;打印出了&lt;code&gt;a&lt;&#x2F;code&gt;的值，也就是&lt;code&gt;0&lt;&#x2F;code&gt;，同时第一个赋值没有出错，将&lt;code&gt;a&lt;&#x2F;code&gt;改为了1234，但是接下来的一行代码又出现了1234这个数字&lt;code&gt;__isoc99_scanf(0x7fa859609004, 1234, 0x7fa85959d8d0, 16 &amp;lt;no return ...&amp;gt;&lt;&#x2F;code&gt;。重复实验并且改变输入的数字，会发现这一行调用函数的第二个参数总是我们输入的第一个数字，也就是第一次给a赋值并成功的结果。&lt;&#x2F;p&gt;
&lt;p&gt;学过操作系统的同学或者对计算机组成有所了解的同学会知道，程序运行时的各种所需都是存储在内存里的，变量也不例外，而它们在内存里都是有个地址的。基于这些知识和刚才实验的结果，我们可以推测，&lt;code&gt;scanf(&amp;quot;%d&amp;quot;, a);&lt;&#x2F;code&gt;是将a的值认为是一个指针的地址并尝试向里面写入数据，但是a的默认值并不一定是一块给写数据的内存空间，这时候就引发了一个错误。&lt;&#x2F;p&gt;
&lt;p&gt;接下来让我们到&lt;code&gt;scanf&lt;&#x2F;code&gt;的&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man3&#x2F;scanf.3.html&quot;&gt;manual page&lt;&#x2F;a&gt;看看描述。&lt;&#x2F;p&gt;
&lt;p&gt;这里我把关键的两段截出来，其他部分对这个问题帮助不大所以就自己看了。重点看加粗部分&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   The scanf() family of functions scans input according to *format* as
   described below.  This format may contain *conversion specifications*;
   the results from such conversions, **if any, are stored in the
   locations pointed to by the *pointer* arguments that follow format**.
   Each pointer argument must be of a type that is appropriate for the
   value returned by the corresponding conversion specification.

   **If the number of conversion specifications in format exceeds the
   number of pointer arguments, the results are undefined.  If the
   number of pointer arguments exceeds the number of conversion
   specifications, then the excess pointer arguments are evaluated, but
   are otherwise ignored.**
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这里format指的是&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Printf_format_string&quot;&gt;格式化字符串&lt;&#x2F;a&gt;，简单来说就是printf&#x2F;printf的第一个参数，fscanf&#x2F;fprintf的第二个参数，而这个字符串里的conversion specifications（中文维基直译为转换说明）就是指指定类型的那个e&#x2F;p&#x2F;d&#x2F;x，比如%d中的d。同时从这里可能也就能理解为什么要叫printf&#x2F;scanf而不叫print&#x2F;scan，因为这是print format&#x2F;scan format的简写。顺便一提，格式化字符串还是一类漏洞的名称，有兴趣的话不妨搜索了解一下。&lt;&#x2F;p&gt;
&lt;p&gt;然后回到话题，看到第一处加粗的文字，也就是说，若里面有类似%d这样的参数，而且也有对应的参数（比如&lt;code&gt;scanf(&amp;quot;%d&amp;quot;, a)；&lt;&#x2F;code&gt;里的a就是%d对应的参数）scanf会按照格式读入数据（并将其转化为二进制表示），然后存入对应&lt;strong&gt;指针&lt;&#x2F;strong&gt;参数指向的地址。也就是说它把后面的参数认为是指针了。&lt;&#x2F;p&gt;
&lt;p&gt;这里C语言熟练的朋友就知道，局部自动(auto)变量定义时候不会隐式初始化，所以a的值是不确定的，把它直接给scanf用的结果大抵相当于向野指针指的地方写数据。所以段错误什么的很正常吧，&lt;&#x2F;p&gt;
&lt;p&gt;那么为什么下面这段代码不会出错呢？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
    int a[1];
    printf(&amp;quot;%d&amp;quot;, a);
    printf(&amp;quot;%d&amp;quot;, &amp;amp;a);
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;a);
    scanf(&amp;quot;%d&amp;quot;, a);
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;因为数组名是常量指针。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;肯定有认真听课的这样回答，但是很遗憾，不是的。数组名不是指针，但是它的确被转换成了指针。具体的内容可以搜索《说出来你们可能不信，但是数组名确实不是指针常量》。但是这个东西并不太重要，如果不当语言律师也没打算深度钻研C，也没有必要理解。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zai-han-shu-li-kai-bu-liao-da-shu-zu-ma&quot;&gt;在函数里开不了大数组吗？&lt;&#x2F;h1&gt;
&lt;p&gt;这里我们继续用代码做实验&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
    int a[524288];
    printf(&amp;quot;OK\n&amp;quot;);
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;编译运行，程序多半并不能让我们看到&lt;code&gt;OK&lt;&#x2F;code&gt;，而是会出现和前面一样的情况，也就是段错误。（如果没出现就把这个数字翻几倍就能看到效果了）。&lt;&#x2F;p&gt;
&lt;p&gt;简单来说的话，函数中声明定义的非全局、非static，且没有使用&lt;code&gt;*alloc&lt;&#x2F;code&gt;、&lt;code&gt;new&lt;&#x2F;code&gt;产生的变量都会被放在栈上，栈的大小由编译选项决定，在我的电脑上大致就是能开500,000个int的大小。也可以在OJ上测试一下栈的大小，但同时并不建议在栈上开这么大，在ACM中还是全局的数组比较好用。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;wo-kai-liao-yi-ge-hen-da-de-quan-ju-shu-zu-dan-shi-bian-yi-wu-fa-tong-guo-zhe-shi-wei-shi-yao&quot;&gt;我开了一个很大的全局数组，但是编译无法通过，这是为什么？&lt;&#x2F;h1&gt;
&lt;p&gt;编译器会阻止你开一个大小超过size_t表达范围的数组，也就是&lt;code&gt;sizeof&lt;&#x2F;code&gt;不会超过表达范围导致溢出的范围。而size_t是一个和平台相关的数据结构，在32位Linux机下，有以下结果：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@vultr:~# cat test.c
#include&amp;lt;stdio.h&amp;gt;
int a[10000000000];
int main()
{
        printf(&amp;quot;%d\n%d&amp;quot;,sizeof(size_t),sizeof(long long));
        return 0;
}

root@vultr:~# gcc test.c  -o test
test.c:2:5: error: size of array ‘a’ is too large
 int a[10000000000];
     ^
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而在64位Linux机下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@vultr:~# cat test.c
#include&amp;lt;stdio.h&amp;gt;
int a[10000000000];
int main()
{
                printf(&amp;quot;%d\n%d&amp;quot;,sizeof(size_t),sizeof(long long));
                        return 0;
}

root@vultr:~# gcc test.c -o test
root@vultr:~# cat test2.c
#include&amp;lt;stdio.h&amp;gt;
int a[10000000000000000000];
int main()
{
                printf(&amp;quot;%d\n%d&amp;quot;,sizeof(size_t),sizeof(long long));
                        return 0;
}

root@vultr:~# gcc test2.c -o test2
test2.c:2:5: error: size of array ‘a’ is too large
 int a[10000000000000000000];
     ^
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;wo-kai-liao-yi-ge-shao-xiao-yi-xie-de-quan-ju-shu-zu-wei-shi-yao-bian-yi-huan-shi-shi-bai-liao-er-qie-cuo-wu-de-yuan-yin-fei-chang-fu-za&quot;&gt;我开了一个稍小一些的全局数组，为什么编译还是失败了而且错误的原因非常复杂？&lt;&#x2F;h1&gt;
&lt;p&gt;把错误名单上下拉动找一下，通常能看到下图类似的东西，说明你遇到的正是我现在要说的这个问题：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin&#x2F;1573571964453.png&quot; alt=&quot;1573571964453&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;首先需要了解的知识是一个可执行文件的文件格式，在Windows上的是PE文件格式（包括&lt;code&gt;.exe&lt;&#x2F;code&gt;、&lt;code&gt;.dll文&lt;&#x2F;code&gt;件），Linux上则是ELF文件。不过这里不做深入解析，大家只需要知道这些文件的一个构成部分是各种节。&lt;&#x2F;p&gt;
&lt;p&gt;在Linux上使用&lt;code&gt;size&lt;&#x2F;code&gt;这个工具可以查看ELF文件的各个节的大小，这里我们准备三份代码，编译并使用size查看。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&amp;#x2F;&amp;#x2F; where_is_global.cpp
#include&amp;lt;stdio.h&amp;gt;
int a[1024];
int main()
{
    printf(&amp;quot;%OK&amp;quot;);
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&amp;#x2F;&amp;#x2F; where_is_global2.cpp
#include&amp;lt;stdio.h&amp;gt;
int a[2048];
int main()
{
    printf(&amp;quot;%OK&amp;quot;);
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&amp;#x2F;&amp;#x2F; where_is_global3.cpp
#include&amp;lt;stdio.h&amp;gt;
int a[1024] = {0};
int main()
{
    printf(&amp;quot;%OK&amp;quot;);
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ size where_is_global
   text    data     bss     dec     hex filename
   1467     584    4128    6179    1823 where_is_global
$ size where_is_global2
   text    data     bss     dec     hex filename
   1467     584    8224   10275    2823 where_is_global2
$ size where_is_global3
   text    data     bss     dec     hex filename
   1467     584    4128    6179    1823 where_is_global3
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到区别仅在于bss所对应的数字，也就是说默认情况下，全局变量在编译后文件存放于.bss节，这也就是出现问题的原因。&lt;&#x2F;p&gt;
&lt;p&gt;默认情况下gcc对节的大小做了限制，如果超过的情况下就会出现这样的错误。但是这个是可以通过编译选项调整的，所以在不同的OJ上可能有不同的结果，在不同的环境下也不一定都能触发这个错误，下面是一份能在我的电脑上（Windows10 1903 Build, devcpp）触发的代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include&amp;lt;stdio.h&amp;gt;

int a[1000000000000000000L];

int main()
{
    printf(&amp;quot;%dK\n&amp;quot;,0);
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;wo-kai-liao-yi-ge-hen-da-de-quan-ju-shu-zu-bing-qie-tong-guo-liao-bian-yi-ke-shi-wei-shi-yao-cheng-xu-yun-xing-yi-ran-reliao-deng-dai-geng-hao-de-da-an&quot;&gt;我开了一个很大的全局数组并且通过了编译，可是为什么程序运行依然RE了？（等待更好的答案）&lt;&#x2F;h1&gt;
&lt;p&gt;这里我也没有一个十分确定的答案，先直接给一个在我电脑上可以触发这样错误的程序&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include&amp;lt;stdio.h&amp;gt;

static int a[1000000000000L];

int main()
{
    printf(&amp;quot;%dK\n&amp;quot;,a[1000000000L - 1]);
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来我们深入到程序编译成的汇编代码里调试看一下，发现RE是出现在&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin&#x2F;1573577931809.png&quot; alt=&quot;1573579083511&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;后来找了办法确定了RAX里存放的是数组的地址，但是除此之外也不知道为什么会出这个错。&lt;&#x2F;p&gt;
&lt;p&gt;我理解来电脑不应该分配那么多内存，也就是分配阶段就应该出问题了，而不是在写东西的时候才有问题。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;和&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.yuki-nagato.com&#x2F;&quot;&gt;yuki nagato&lt;&#x2F;a&gt;讨论有了一个新的猜测&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;yuki nagato
关于这个问题，我觉得应该是因为未初始化的全局变量位于bss段，系统在程序开始执行时只是记录了它的大小，没有给它实际分配内存&lt;&#x2F;p&gt;
&lt;p&gt;yuki nagato
在首次访问的时候，系统会给它分配全零的页面，这时候会触发相关的错误&lt;&#x2F;p&gt;
&lt;p&gt;CSUwangj
嗯嗯，感觉你说的有道理&lt;&#x2F;p&gt;
&lt;p&gt;CSUwangj
这样子的话，我想想有没有办法验证&lt;&#x2F;p&gt;
&lt;p&gt;CSUwangj
似乎直接调试windows可能可以验证这个&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;但是由于本人调试Windows经验不足，验证期限无限期延长...欢迎大牛帮帮忙提提PR&lt;&#x2F;p&gt;
&lt;h1 id=&quot;wei-shi-yao-yue-jie-hui-dao-zhi-re&quot;&gt;为什么越界会导致 RE？&lt;&#x2F;h1&gt;
&lt;p&gt;一句话回答就是，越界写会导致向不该写的地方写入数据。&lt;&#x2F;p&gt;
&lt;p&gt;详细展开的话，如果是对函数里的局部变量进行了越界写，那么可能会破坏程序运行时的调用栈，导致返回地址改变，这类情况也可以归结为栈溢出，而且这个名称同时也对应了历史上一类很有名的漏洞——&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.52pojie.cn&#x2F;thread-974510-1-1.html&quot;&gt;栈溢出漏洞&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;如果是对static变量、局部变量、使用new或者*alloc分配的变量进行越界写，因为它们分配在堆上，造成的问题也就是堆溢出，同样的，堆溢出也对应了&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ciphersaw.me&#x2F;ctf-wiki&#x2F;pwn&#x2F;linux&#x2F;heap&#x2F;heapoverflow_basic&#x2F;&quot;&gt;堆溢出漏洞&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;除此之外还有一种情况就是OJ的编译器对于越界做了特殊的判断，导致一旦出现越界写程序就会强制报错并结束，这样的情况虽然越界写没有对程序运行造成影响，也还是报了RE。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;wei-shi-yao-you-shi-hou-yue-jie-bu-hui-re-dan-shi-hui-tle-wa&quot;&gt;为什么有时候越界不会 RE 但是会 TLE&#x2F;WA？&lt;&#x2F;h1&gt;
&lt;p&gt;在&lt;a href=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin&#x2F;#wei-shi-yao-zai-du-ru-de-shi-hou-bu-jia-jing-chang-hui-re-dan-shi-shu-zu-ming-bu-jia-jiu-mei-wen-ti&quot;&gt;第一个问题&lt;&#x2F;a&gt;中我们看到了，对程序进行的赋值操作其实也就是对对应内存的写入操作（不考虑利用寄存器优化的情况），同时我们可以用&lt;code&gt;printf(&amp;quot;%p&amp;quot;, &amp;amp;a);&lt;&#x2F;code&gt;这样的语句来查看变量a所在内存的地址。那么有以下代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;#include&amp;lt;stdio.h&amp;gt;

int main()
{
    int a[16], b[16], t;
    printf(&amp;quot;%p %p %p\n&amp;quot;, &amp;amp;a, &amp;amp;b, &amp;amp;t);
    for(int i = 0; i &amp;lt; 34 ; ++ i){
        a[i] = i;
    }
    for(int i = 0; i &amp;lt; 16 ; ++ i){
        printf(&amp;quot;%d &amp;quot;, a[i]);
    }
    printf(&amp;quot;%d\n&amp;quot;, t);
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;已知第一行输出为&lt;code&gt;000000000062FD90 000000000062FDD0 000000000062FE14&lt;&#x2F;code&gt;，那么第二行输出是什么？（不要忘记考虑在我电脑上&lt;code&gt;sizeof(int)==4&lt;&#x2F;code&gt;）&lt;&#x2F;p&gt;
&lt;p&gt;答案是&lt;code&gt;16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin&#x2F;1573619928591.png&quot; alt=&quot;1573619950147&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;虽然变量在内存里的布局在C语言中是未定义的，但是通常来说它们根据情况（是否在同一函数、是否是全局&#x2F;static变量、是否通过new&#x2F;*alloc分配）占据一片空间的相邻位置。在这样的情况下越界写就会改变相邻变量的内容，于是导致WA（恰好改变了答案）、TLE（改变了循环用的计数器）也就不难理解了。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;wo-zhi-ding-yi-guo-yi-ge-left-wei-shi-yao-bian-yi-qi-gao-su-wo-error-reference-to-left-is-ambiguous&quot;&gt;我只定义过一个 left，为什么编译器告诉我&lt;code&gt;[Error] reference to &#x27;left&#x27; is ambiguous&lt;&#x2F;code&gt;？&lt;&#x2F;h1&gt;
&lt;p&gt;如果你仔细查看报错信息，应该会看到类似&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;916    3    {PATH}    [Note] std::ios_base&amp;amp; std::left(std::ios_base&amp;amp;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;出现这种问题是因为引入的头文件中的变量，比如left这个是在&lt;code&gt;bits&#x2F;ios_base.h&lt;&#x2F;code&gt;里，而&lt;code&gt;algorithm&lt;&#x2F;code&gt;里有count这样的函数。&lt;&#x2F;p&gt;
&lt;p&gt;这些变量通常都在有两种方法可以解决，一是不要使用&lt;code&gt;using namespace std;&lt;&#x2F;code&gt;这个语句，另一个是不要用类似&lt;code&gt;left&lt;&#x2F;code&gt;, &lt;code&gt;count&lt;&#x2F;code&gt;这样的名称。从工程角度来说，第一个做法是比较合理的。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;error-ld-returned-1-exit-statusshi-shi-yao-cuo-wu&quot;&gt;[Error] ld returned 1 exit status是什么错误？&lt;&#x2F;h1&gt;
&lt;p&gt;一个C语言源代码到可执行文件之间需要经过预处理、编译、汇编、链接几个过程，ld(Linux)或者ld.exe(Windows)是GCC使用的链接器。&lt;&#x2F;p&gt;
&lt;p&gt;这个错误只是说明了链接器运行失败，但是具体的错误要向上找一两行才知道是为什么，这里举几个常见的例子：（欢迎补充）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;additional-relocation-overflows-omitted-from-the-output&quot;&gt;additional relocation overflows omitted from the output&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin&#x2F;1573620431685.png&quot; alt=&quot;1573620431685&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;见&lt;a href=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin&#x2F;#wo-kai-liao-yi-ge-shao-xiao-yi-xie-de-quan-ju-shu-zu-wei-shi-yao-bian-yi-huan-shi-shi-bai-liao-er-qie-cuo-wu-de-yuan-yin-fei-chang-fu-za&quot;&gt;我开了一个稍小一些的全局数组，为什么编译还是失败了而且错误的原因非常复杂？&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;undefined-reference-to-winmain&quot;&gt;undefined reference to `WinMain&#x27;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin&#x2F;1573620523529.png&quot; alt=&quot;1573620523529&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;缺少main函数，通常是因为把main打成了mian&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cannot-open-output-file-zhe-li-shi-ge-lu-jing-permission-denied&quot;&gt;cannot open output file [这里是个路径]: Permission denied&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;acmzhong-yi-xie-chang-jian-de-wen-ti-ji-yuan-yin&#x2F;1573620621212.png&quot; alt=&quot;1573620621212&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;没有关闭正在运行的程序导致ld无法更新编译出来的.exe&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zong-shi-shuo-de-dui-zhan-shi-zhi-shi-yao-shi-shu-ju-jie-gou-li-de-dui-he-zhan-ma&quot;&gt;总是说的堆栈，是指什么？是数据结构里的堆和栈吗？&lt;&#x2F;h1&gt;
&lt;p&gt;这里指的是操作系统里的堆栈，和数据结构里的堆、栈不是一个东西。&lt;&#x2F;p&gt;
&lt;p&gt;这些前置知识能在《计算机组成原理》《操作系统》这样的书籍里找到，这里因为笔者学艺不精，不敢妄言，如果有大牛愿意贡献这部分的内容，欢迎在&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CSUwangj&#x2F;ACM_Weird_Problem&quot;&gt;repo&lt;&#x2F;a&gt;里提PR。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;scanf manual page
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man3&#x2F;scanf.3.html&quot;&gt;http:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man3&#x2F;scanf.3.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;格式化字符串
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Printf_format_string&quot;&gt;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Printf_format_string&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;如何调整GCC编译程序的默认栈大小
&lt;ul&gt;
&lt;li&gt;http:&#x2F;&#x2F;www.cplusplus.com&#x2F;forum&#x2F;general&#x2F;134645&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Why is the maximum size of an array “too large”?
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;42575849&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;GCC compile option
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc-4.6.0&#x2F;gcc&#x2F;i386-and-x86_002d64-Options.html#i386-and-x86_002d64-Options&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;栈基础 &amp;amp; 栈溢出 &amp;amp; 栈溢出进阶
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;www.52pojie.cn&#x2F;thread-974510-1-1.html&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;0Day技术分析-4-堆溢出原理
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1083866&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>又一次装机</title>
		<published>2019-01-21T10:41:05+08:00</published>
		<updated>2020-08-07T01:54:43.009683+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/you-yi-ci-zhuang-ji/" type="text/html"/>
		<id>https://CSUwangj.github.io/you-yi-ci-zhuang-ji/</id>
		<content type="html">&lt;p&gt;$1更新了固态硬盘，所以又要重装电脑啦~
记录一蛤装机过程，主要还是给自己以后参考用。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;zhun-bei-gong-zuo&quot;&gt;准备工作&lt;&#x2F;h1&gt;
&lt;p&gt;到&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;software-download&#x2F;windows10&quot;&gt;Download Windows 10 Disc Image (ISO File) - Microsoft&lt;&#x2F;a&gt;下载创建安装盘的工具&lt;&#x2F;p&gt;
&lt;p&gt;到电脑厂商官网&#x2F;硬件厂商官网下载驱动。&lt;&#x2F;p&gt;
&lt;p&gt;使用GeekUninstaller导出一份软件清单，并且按照清单下载安装程序（假如没有留下来的）。&lt;&#x2F;p&gt;
&lt;p&gt;查看Path里有没有什么需要配置的东西，保留ssh私钥。&lt;&#x2F;p&gt;
&lt;p&gt;测试驱动包会干些什么（别再给我搞个什么电脑管家我就艹了）&lt;&#x2F;p&gt;
&lt;p&gt;代码、浏览器都不用备份，我使用OneDrive&#x2F;Chrome解决迁移问题（同步真是好，但是涉密千万别上网）。&lt;&#x2F;p&gt;
&lt;p&gt;UWP应用虽好，但是不一定在清单里，记得备份一下列表。&lt;&#x2F;p&gt;
&lt;p&gt;有注册的软件记得注销&#x2F;记录注册码。&lt;&#x2F;p&gt;
&lt;p&gt;单机游戏记得备份存档，云存档不用。各个工具的设置如果能导出的话导一下。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;an-zhuang-guo-cheng&quot;&gt;安装过程&lt;&#x2F;h1&gt;
&lt;p&gt;安装过程就是反着来就是了。&lt;&#x2F;p&gt;
&lt;p&gt;顺便一提这次加了内存换了SSD，国产软件基本都丢虚拟机里了。&lt;&#x2F;p&gt;
&lt;p&gt;目前来看暂时没有想到什么值得一提的东西，可能是因为比较习惯了吧。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Cryptography_Engineering_Exercise</title>
		<published>2018-08-24T00:42:29+08:00</published>
		<updated>2020-08-07T02:01:26.829857+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/cryptography-engineering-exercise/" type="text/html"/>
		<id>https://CSUwangj.github.io/cryptography-engineering-exercise/</id>
		<content type="html">&lt;p&gt;Cryptography Engineer在目前看来是一本十分不错的讲密码学的书。既然书名都叫密码学工程了，那就更应该动手做点练习了，这里就是用于存放部分练习以及索引的。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;chapter-1&quot;&gt;Chapter 1&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;current-event-exercises&quot;&gt;Current Event Exercises&lt;&#x2F;h2&gt;
&lt;p&gt;这个训练感觉很能提升我的系统意识，所以目前是有一个长期更新的打算，后续看看吧。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;security-review-exercises&quot;&gt;Security Review Exercises&lt;&#x2F;h2&gt;
&lt;p&gt;同上。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;general-exercises&quot;&gt;General Exercises&lt;&#x2F;h2&gt;
&lt;p&gt;这里我觉得使用图像会显得更加优雅一些，但是很明显，让我去做那么多树图我也很难受，所以这里使用了graphviz，使用的Roadmap默认情况下不加说明是dot&lt;&#x2F;p&gt;
&lt;h1 id=&quot;chapter-2&quot;&gt;Chapter 2&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;exercise&quot;&gt;Exercise&lt;&#x2F;h2&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>在pip连不上网的时候安装pwntools</title>
		<published>2018-07-21T14:38:02+08:00</published>
		<updated>2020-08-07T01:48:37.615611+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/zai-piplian-bu-shang-wang-de-shi-hou-an-zhuang-pwntools/" type="text/html"/>
		<id>https://CSUwangj.github.io/zai-piplian-bu-shang-wang-de-shi-hou-an-zhuang-pwntools/</id>
		<content type="html">&lt;p&gt;$1本文描述了这样一种特殊情况下安装pwntools的解决方案：有方法联网，但是pip连不上网。 &lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;解决方法很简单，就是将pwntools和其依赖包下载下来，然后手动安装。选择对应版本，有whl直接下载whl，没有就下载源代码用命令python setup install安装，安装的时候可能会遇到有预先依赖，那就先安装依赖的包就行。 &lt;&#x2F;p&gt;
&lt;p&gt;下图是我在2018年7月22日下载的一套，有需要的度盘链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1efC82WX_TdAMoS7aVBFi1w 密码：lnv8&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;zai-piplian-bu-shang-wang-de-shi-hou-an-zhuang-pwntools&#x2F;1532396878037.png&quot; alt=&quot;压缩包&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;安装效果如下图&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;zai-piplian-bu-shang-wang-de-shi-hou-an-zhuang-pwntools&#x2F;1532397057219.png&quot; alt=&quot;安装效果&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CTF用环境搭建</title>
		<published>2018-07-20T14:57:49+08:00</published>
		<updated>2020-08-07T01:54:42.998715+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/ctfyong-huan-jing-da-jian/" type="text/html"/>
		<id>https://CSUwangj.github.io/ctfyong-huan-jing-da-jian/</id>
		<content type="html">&lt;h1 id=&quot;mu-qian-gong-ju-ji-he&quot;&gt;目前工具集合&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;huan-jing&quot;&gt;环境&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
86架构及基本库&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
wine32&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;an-zhuang-shi&quot;&gt;安装式&lt;&#x2F;h2&gt;
&lt;p&gt;这里的话就是那种安装以后直接用的，也有的是插件&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
pwndbg&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
r2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Audacity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fei-an-zhuang-shi&quot;&gt;非安装式&lt;&#x2F;h2&gt;
&lt;p&gt;这里的是不用&#x2F;不能安装的库，比如脚本等&lt;&#x2F;p&gt;
&lt;p&gt;统一放置在&#x2F;opt&#x2F;目录下，可能根据类别再分&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
rsatool&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
cloacked-pixel&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
volatility&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
routerpassview&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Stegsolve &lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
CTFcrackTools&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pythonku&quot;&gt;Python库&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
pwntools&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
gmpy2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
unicorn&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
zio&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
angr&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
request &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;zheng-wen&quot;&gt;正文&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;huan-jing-1&quot;&gt;环境&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;86jia-gou-ji-qi-ge-bie-ji-ben-ku&quot;&gt;86架构及其个别基本库&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dpkg --add-architecture i386 
apt-get update
apt-get -f dist-upgrade 
apt-get update
apt-get install lib32c-dev lib32stdc++6  
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;wine32&quot;&gt;wine32&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get install wine32
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;an-zhuang-shi-1&quot;&gt;安装式&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;pwndbg&quot;&gt;pwndbg&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get install python3.7-dev
git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;pwndbg&amp;#x2F;pwndbg &amp;#x2F;opt&amp;#x2F;pwndbg
cd &amp;#x2F;opt&amp;#x2F;pwndbg
.&amp;#x2F;setup.sh 
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果对pip无法用的时候怎么安装感兴趣，可以戳&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;csuwangj.top&#x2F;2018&#x2F;07&#x2F;21&#x2F;%E5%9C%A8pip%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%BD%91%E7%9A%84%E6%97%B6%E5%80%99%E5%AE%89%E8%A3%85pwntools&#x2F;&quot;&gt;这里&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;r2&quot;&gt;r2&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;radare&amp;#x2F;radare2.git &amp;#x2F;opt&amp;#x2F;r2
cd &amp;#x2F;opt&amp;#x2F;r2&amp;#x2F;
sys&amp;#x2F;install.sh 
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;audacity&quot;&gt;Audacity&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get install audacity
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;fei-an-zhuang-shi-1&quot;&gt;非安装式&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;工具&lt;&#x2F;th&gt;&lt;th&gt;指令&lt;&#x2F;th&gt;&lt;th&gt;备注&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;rsatool&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;ius&#x2F;rsatool.git &#x2F;opt&#x2F;Crypto&#x2F;rsatool&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Openssl RSA密钥生成&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;cloacked-pixel&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;livz&#x2F;cloacked-pixel &#x2F;opt&#x2F;Steganography&#x2F;cloacked-pixel&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;图像隐写&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;pattern&lt;&#x2F;td&gt;&lt;td&gt;无&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;volatility&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;volatilityfoundation&#x2F;volatility.git &#x2F;opt&#x2F;Forensics&#x2F;volatility&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;内存取证&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;pythonku-1&quot;&gt;Python库&lt;&#x2F;h2&gt;
&lt;p&gt;默认在pip能用的情况下，默认为python2.7，其他版本会备注&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;工具&lt;&#x2F;th&gt;&lt;th&gt;指令&lt;&#x2F;th&gt;&lt;th&gt;备注&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;pwntools&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;pip install pwntools&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;gmpy2&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;apt-get install python-gmpy2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;zio&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;pip install termcolor zio&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;angr&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;pip install angr&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;unicorn&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;pip install unicorn&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;pwntools自带，但是不妨碍你只安装它&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;request&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;pip install request&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>关于散列函数的一点思考</title>
		<published>2018-06-03T01:35:47+08:00</published>
		<updated>2020-08-07T01:48:37.612619+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/guan-yu-san-lie-han-shu-de-yi-dian-si-kao/" type="text/html"/>
		<id>https://CSUwangj.github.io/guan-yu-san-lie-han-shu-de-yi-dian-si-kao/</id>
		<content type="html">&lt;p&gt;$1今天在ACM群灌水的时候因为一个题目引发了一些思考，题目是&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;qscoj.cn&#x2F;#&#x2F;contest&#x2F;show&#x2F;220&quot;&gt;比赛链接&lt;&#x2F;a&gt;的A题&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;其实题目很明显，3e4的字符串总量，1e3的字符串长度上限，样例就显示了有字母、数字、符号，就10M内存，用字典树妥妥炸了。&lt;&#x2F;p&gt;
&lt;p&gt;所以就哈希呗。&lt;&#x2F;p&gt;
&lt;p&gt;幸运的是STL里就有自带的hash函数，于是就水过去了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;bits&amp;#x2F;stdc++.h&amp;gt;
using namespace std;
int main()
{
	ios::sync_with_stdio(0);
	set&amp;lt;long long&amp;gt; m;
	hash&amp;lt;string&amp;gt; h;
	int n;
	string temp;
	cin&amp;gt;&amp;gt;n;
	while(n--){
		cin&amp;gt;&amp;gt;temp;
		m.insert(h(temp));
	}
	cout&amp;lt;&amp;lt;m.size()&amp;lt;&amp;lt;endl;
	return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为其实3e4这个字符串数量还是比较大的，在群里聊起了碰撞的问题，然后发现还是有丶东西，索性写一篇博文分析一下。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;san-lie-han-shu-jian-jie&quot;&gt;散列函数简介&lt;&#x2F;h2&gt;
&lt;p&gt;散列函数，也称哈希函数，是一种将任意大小数据映射到固定长度数字的单向函数。&lt;&#x2F;p&gt;
&lt;p&gt;散列函数常见于密码学的目的，随着密码学渗透到计算机的方方面面，因为其一些有用的特性也被用于ACM竞赛中。&lt;&#x2F;p&gt;
&lt;p&gt;通常来说，好的散列函数拥有以下几个特性：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;确定性。固定输入对应的散列值是固定的。&lt;&#x2F;li&gt;
&lt;li&gt;分布均一。优秀的散列函数会使得所有值可能出现的概率尽量一致，这也导出了后面引出的一些特性。&lt;&#x2F;li&gt;
&lt;li&gt;值域固定。比如&lt;code&gt;std::hash&lt;&#x2F;code&gt;的值域为size_t的可表示范围，SHA-1的值域为$[0,2^{160}-1]$。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;于是，用于密码学的散列函数经常有以下的特性：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;单向性。这里有两个含义，一方面来说既然任意大小的数据都被映射到固定范围的一些值上，那么必然是一个多对一的关系，这就是第一个单向的原因；第二个原因则是函数本身的算法经常会保证无法通过散列值计算原始数据可能的集合。&lt;&#x2F;li&gt;
&lt;li&gt;雪崩效应。一个比特的改变，可能就会引起值的大幅度变化（按CryptoExchane的说法，是一半以上的比特）。这样就很难通过碰撞发起攻击了。&lt;&#x2F;li&gt;
&lt;li&gt;抗碰撞性。这里具体又分为两种，一种为抗弱碰撞性，另一种为抗强碰撞性，分别对应第二原像攻击和碰撞攻击。
&lt;ol&gt;
&lt;li&gt;抗弱碰撞性。指对于某散列函数$H()$与任意给定的$x$，找到$y≠x$且$H(x)=H(y)$在计算上不可行。&lt;&#x2F;li&gt;
&lt;li&gt;抗强碰撞性。值对于某散列函数$H()$而言，找到$H(x)=H(y)$且$x≠y$这样的数对在计算上不可行。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;公开性。为了鉴别需求，常见的散列函数算法公开，这样任何能够编程的人都可以自己编程验证散列值。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;acmzhong-de-san-lie-han-shu&quot;&gt;ACM中的散列函数&lt;&#x2F;h2&gt;
&lt;p&gt;这里毕竟一个是我也退役了，没碰ACM有些时日，另一个我打ACM时也没有学得很深，所以这里的举例只能拿我们讲课的课件来粗糙地分析一下了，如果有误欢迎指出。&lt;&#x2F;p&gt;
&lt;p&gt;顺便ACM这比赛打过的同学就知道，不可能真写一个类似MD5这样的散列函数，ACM中的散列函数我通常用一句话概括：“又不是不能用。”&lt;&#x2F;p&gt;
&lt;p&gt;对于ACM当然是够用的，用其他地方就，再商量吧~&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-jie-mo-yu-fa&quot;&gt;直接模余法&lt;&#x2F;h3&gt;
&lt;p&gt;首先对于整数来说，最简单的方式就是模余法了，这也是很多&lt;strong&gt;题目&lt;&#x2F;strong&gt;处理大数的方式。模余法要尽量模上一个&lt;strong&gt;素数&lt;&#x2F;strong&gt;，这样会使得冲突的可能性降低。&lt;&#x2F;p&gt;
&lt;p&gt;但是选手在写题的时候通常不会直接模余，因为即便这样冲突降低，但是依然不小，而且会后续规避这样冲突的处理操作并不是很舒服。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhuan-huan-mo-yu-fa&quot;&gt;转换(模余)法&lt;&#x2F;h3&gt;
&lt;p&gt;这里请看这个例题&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;acm.hdu.edu.cn&#x2F;showproblem.php?pid=1496&quot;&gt;(&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;acm.hdu.edu.cn&#x2F;showproblem.php?pid=1496&quot;&gt;HDOJ-1496 Equations&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;acm.hdu.edu.cn&#x2F;showproblem.php?pid=1496&quot;&gt;)&lt;&#x2F;a&gt; &lt;&#x2F;p&gt;
&lt;p&gt;题意简单，就类似“百钱买百鸡”问题。&lt;&#x2F;p&gt;
&lt;p&gt;但是如果直接暴力地四重循环，那可就很嗨了……虽说一般一秒做$10^8$简单计算的确可以，但是这题的数据的确就是在超时的边缘。&lt;&#x2F;p&gt;
&lt;p&gt;正确的做法就是预处理两个变量所有可能对应值的相反数，然后进行查找。&lt;&#x2F;p&gt;
&lt;p&gt;但是如果直接搞，那就需要开$2×10^7$大小的数组，不仅在MLE的边缘，而且还有初始化TLE的风险。&lt;&#x2F;p&gt;
&lt;p&gt;所以这里就可以用散列了。具体讨论见&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;acm.hdu.edu.cn&#x2F;forum&#x2F;read.php?tid=3276&amp;amp;fpage=0&amp;amp;toread=&amp;amp;page=2&quot;&gt;这里&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;同样的，对于一个纯字母的字符串来说，也可以进行这样的转换。就是将一个字符串视为二十六进制的数字，然后求这个数字的十进制值，因为可能会溢出，就模上一个素数如$1000000007$这样的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zi-fu-chuan-hash-elfhash&quot;&gt;字符串HASH——ELFHASH&lt;&#x2F;h3&gt;
&lt;p&gt;这里直接放它的代码吧，十分简短。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&amp;#x2F;&amp;#x2F; ELF Hash Function  
unsigned int ELFHash(char *str)  
{  
    unsigned int hash = 0;  
    unsigned int x = 0;  
  
    while (*str)  
    {  
        hash = (hash &amp;lt;&amp;lt; 4) + (*str++);&amp;#x2F;&amp;#x2F;hash左移4位，把当前字符ASCII存入hash低四位。   
        if ((x = hash &amp;amp; 0xF0000000L) != 0)  
        {  
            &amp;#x2F;&amp;#x2F;如果最高的四位不为0，则说明字符多余7个，现在正在存第7个字符，如果不处理，再加下一个字符时，第一个字符会被移出，因此要有如下处理。  
            &amp;#x2F;&amp;#x2F;该处理，如果最高位为0，就会仅仅影响5-8位，否则会影响5-31位，因为C语言使用的算数移位  
            &amp;#x2F;&amp;#x2F;因为1-4位刚刚存储了新加入到字符，所以不能&amp;gt;&amp;gt;28  
            hash ^= (x &amp;gt;&amp;gt; 24);  
            &amp;#x2F;&amp;#x2F;上面这行代码并不会对X有影响，本身X和hash的高4位相同，下面这行代码&amp;amp;~即对28-31(高4位)位清零。  
            hash &amp;amp;= ~x;  
        }  
    }  
    &amp;#x2F;&amp;#x2F;返回一个符号位为0的数，即丢弃最高位，以免函数外产生影响。(我们可以考虑，如果只有字符，符号位不可能为负)  
    return (hash &amp;amp; 0x7FFFFFFF);  
}  
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个函数写起来十分简单。我把注释也复制过来了，就不多解释了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;san-lie-zhi-peng-zhuang-liao-zen-yao-ban&quot;&gt;散列值碰撞了，怎么办？&lt;&#x2F;h2&gt;
&lt;p&gt;扯了那么多前篇，终于到这篇博文真实目的了，不过估计会很短……&lt;&#x2F;p&gt;
&lt;p&gt;既然是散列函数，就要面对这个问题，一旦发生碰撞，很多问题就出来了，这里就简单分析一下针对散列函数的几个攻击吧。同时也会分析一下在ACM中散列函数的一点使用方法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qiong-ju-gong-ji&quot;&gt;穷举攻击&lt;&#x2F;h3&gt;
&lt;p&gt;对于一个理想的散列函数来说，既然满足了上面的几个特性，穷举攻击需要的次数应该就是$\frac{值域}{2}$。&lt;&#x2F;p&gt;
&lt;p&gt;给你一个懂事的微笑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sheng-ri-gong-ji&quot;&gt;生日攻击&lt;&#x2F;h3&gt;
&lt;p&gt;现在我们就尝试攻击散列函数的强抗碰撞性。这里以&lt;code&gt;std::hash&lt;&#x2F;code&gt;为例。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;guan-yu-san-lie-han-shu-de-yi-dian-si-kao&#x2F;1527960903963.png&quot; alt=&quot;cpp reference&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于散列函数的几个特性来说，我们得到值域内任意值的可能性都为$\frac1{2^{32}}$。那么，在计算不同的任意$n$个字符串候，这些散列值都不冲突的可能性就是$\frac{2^{32}-1}{2^{32}}×\frac{2^{32}-2}{2^{32}}×...×\frac{2^{32}-n+1}{2^{32}}$。&lt;&#x2F;p&gt;
&lt;p&gt;对于题目给的数据，使用下面Python代码可以计算得不发生冲突的概率为$0.9005311337474664$即发生错误的可能性为$0.0994688662525336$。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# a.py
a = 1 &amp;lt;&amp;lt; 32
s = 1
for i in range(0, 30000):
	s *= (a-i)&amp;#x2F;a
print(s)
#python a.py
#0.9005311337474664
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可见这个数字对于脸白的人来说是够了的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jiao-lian-wo-lian-hei-duo-zhong-san-lie-han-shu&quot;&gt;教练我脸黑——多重散列函数&lt;&#x2F;h3&gt;
&lt;p&gt;那么我们就要考虑找路子了，这里又有两条分支了：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;既然一个散列函数不行，那我就再来一个。之前是把字母字符串视为二十六进制数，那我就加个ELFHASH。这样做的好处是发生冲突的可能性稳定下降（变为两者发生冲突的乘积），坏处是编码难度上升。&lt;&#x2F;li&gt;
&lt;li&gt;加盐，加不同的盐值。但是这里要求散列函数是对块进行操作的。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;加盐，可以简单理解为在字符串前&#x2F;后面加上一个字符串，这样就可以使散列值发生变化。&lt;&#x2F;p&gt;
&lt;p&gt;对散列函数的要求是显而易见的，因为不论是二十六进制还是ELFHASH，只要之前字符串的散列值是同一个，那么在加盐后结果也不会发生改变。（块的大小对这里也会有影响，这里留给读者自行考虑）&lt;&#x2F;p&gt;
&lt;p&gt;对于&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;19411742&#x2F;what-is-the-default-hash-function-used-in-c-stdunordered-map?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;GCC&lt;&#x2F;a&gt;的&lt;code&gt;std::hash&lt;&#x2F;code&gt;来说，它用的是$MurmurHash Unaligned 2$，是一个分块大小为4的非密码学散列函数。&lt;&#x2F;p&gt;
&lt;p&gt;考虑理想状况，我们将多个盐值对应的不同散列值作为比对的标准，我们就能在一定程度上解决冲突，这里又能分出两条线。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jiang-bu-tong-san-lie-zhi-fang-zai-bu-tong-rong-qi-li&quot;&gt;将不同散列值放在不同容器里&lt;&#x2F;h4&gt;
&lt;p&gt;考虑这样的比对算法&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&amp;#x2F;&amp;#x2F;There is a bunch of set containers named s[0]&amp;#x2F;s[1]&amp;#x2F;etc
string str;
cin &amp;gt;&amp;gt;str;
temp = hash(str)
if(!s[0].count(temp)){
	s[0].insert(temp)
	count++
}else{
	temp = hash(str+&amp;quot;salt1&amp;quot;)
	if(!s[1].count(temp)){
		s[1].insert(temp)
		count++
    }else{
		&amp;#x2F;&amp;#x2F;etc
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么可能会发生这样的问题，就是字符串s在第一次比对时和a串冲突，在第二次比对时又和b串冲突。&lt;&#x2F;p&gt;
&lt;p&gt;易知对于固定数量$n$的生日攻击来说，不发生冲突的概率$p$是一定的，假设多重散列函数就像我们所想的一样工作，那么该实验可以认为是一个成功率为$1-p$的伯努利实验。&lt;&#x2F;p&gt;
&lt;p&gt;在$m$重散列函数的情况下，均发生冲突的可能性是$P_0(m)=C_m^0(1-p)^m$，取这次题目的数据来说，两重散列函数发生冲突的概率为$0.009894055353564416$。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jiang-ge-san-lie-zhi-bao-zhuang-cheng-yi-ge-zheng-ti&quot;&gt;将各散列值包装成一个整体&lt;&#x2F;h4&gt;
&lt;p&gt;也就是说算法改为&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;struct hashv{
	size_t v[2];
};
set&amp;lt;hashv&amp;gt; s;

string str;
cin&amp;gt;&amp;gt;str;
hashv temp
temp.v[0] = hash(str)
temp.v[1] = hash(str+&amp;quot;salt&amp;quot;)
if(!s.count(temp)){
    s.insert(temp);
    count++;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;理想状态下，此时发生单次冲突的概率为两次散列均冲突的概率，即两者的乘积，也就是$2^{64}-2^{33}+1$&lt;&#x2F;p&gt;
&lt;p&gt;利用以下python代码计算得在题设情况下，不发生冲突的可能性为$0.9999999999999999999971601954045129840219384586382661991347799758614026869784477630643202473665079505271849114917935938025327598810920608449$ ，太强辣！&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from decimal import *
a = 1 &amp;lt;&amp;lt; 64 - 1&amp;lt;&amp;lt;33 +1
a = Decimal(str(a))
print(a)
s = Decimal(&amp;quot;1&amp;quot;)
getcontext().prec = 2000
for i in range(0, 30000):
	if not i% 1000:
		print(i)
	s *= (a-Decimal(str(i)))&amp;#x2F;a
print(s)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以发现，这样做以后是几何倍数降低发生碰撞的可能性了。&lt;&#x2F;p&gt;
&lt;p&gt;那么只有一个考虑了，就是这个结构体打算怎么写，不过这个问题就不是我操心的啦~&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hou-ji&quot;&gt;后记&lt;&#x2F;h2&gt;
&lt;p&gt;思考使我快乐，即便这篇文章很水嘻嘻嘻&lt;&#x2F;p&gt;
&lt;p&gt;睡觉去啦~&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>PWN学习记录</title>
		<published>2018-02-10T00:17:50+08:00</published>
		<updated>2020-08-07T01:54:43.006694+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/pwnxue-xi-ji-lu/" type="text/html"/>
		<id>https://CSUwangj.github.io/pwnxue-xi-ji-lu/</id>
		<content type="html">&lt;p&gt;$1学习PWN的记录&lt;&#x2F;p&gt;
&lt;p&gt;可能会有路线，看填坑进度……&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;huan-jing-pei-zhi&quot;&gt;环境配置&lt;&#x2F;h1&gt;
&lt;p&gt;按理说第一篇是要说一下这个&lt;&#x2F;p&gt;
&lt;p&gt;我是Kali 2.0，所以就按照如下指令输进去就行了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dpkg --add-architecture i386 
apt-get update
apt-get -f dist-upgrade 
apt-get install lib32c-dev lib32stdc++6 libc6:i386 gcc-multilib
apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential
pip install pwntools
git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;pwndbg&amp;#x2F;pwndbg &amp;#x2F;opt&amp;#x2F;pwndbg
cd &amp;#x2F;opt&amp;#x2F;pwndbg
.&amp;#x2F;setup.sh
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;xue-xi-ji-lu-ji-wpdi-zhi&quot;&gt;学习记录及WP地址&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Exploit-Exercise&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Nebula&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;csuwangj.top&#x2F;2018&#x2F;07&#x2F;22&#x2F;Exploit-Exercise-Protostar%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90&#x2F;&quot;&gt;Protostar&lt;&#x2F;a&gt;（解析还没写XD）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;csuwangj.github.io&#x2F;2018&#x2F;08&#x2F;03&#x2F;Exploit-Exercise-Fusion%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90&#x2F;&quot;&gt;Fusion&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Main Sequence
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Main Sequence&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Story line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Setup instructions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Irate Manticore&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Touchy Owl&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Wild Amphibian&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Storming Bear&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Screaming Jesus&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Fabled Scorpion&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Selfish Dragonfly&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Vicious Platypus&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;CTF&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;HGAME2018
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;csuwangj.github.io&#x2F;2018&#x2F;02&#x2F;08&#x2F;HGAME2018-week1WP&#x2F;&quot;&gt;week1&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
guess_number&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
flag_server&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
zazahui&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;csuwangj.top&#x2F;2018&#x2F;02&#x2F;16&#x2F;HGAME2018-week2%E9%83%A8%E5%88%86WP&#x2F;&quot;&gt;week2&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
ez_shellcode&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
ez bash jail&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
hacker_system_ver1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
ez_shellcode_ver2&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;To be continue...&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
