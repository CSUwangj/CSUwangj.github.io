<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>LuckyDog | CSUwangj&#x27;s Blog - Software</title>
	<link href="https://CSUwangj.github.io/tags/Software/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://CSUwangj.github.io/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-08-07T01:54:43.014672+08:00</updated>
	<id>https://CSUwangj.github.io/tags/Software/atom.xml</id>
	<entry xml:lang="en">
		<title>编程是很好玩的--md2docx是怎么写出来的</title>
		<published>2019-08-19T21:18:08+08:00</published>
		<updated>2020-08-07T01:54:43.014672+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de/" type="text/html"/>
		<id>https://CSUwangj.github.io/bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de/</id>
		<content type="html">&lt;p&gt;花了一个多月写了一个工具，写一点东西帮助想重新造轮子的朋友~&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;我在上个月花了半个月的时间补充相关知识后，在这个月花了几天时间写出了一个将给定 markdown 按照一定格式渲染成 .docx 文件的工具，代码已经开源在&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CSUwangj&#x2F;md2docx-csharp&quot;&gt;github&lt;&#x2F;a&gt;上。但是这个项目目的只是给中南信安学子使用，而且封面格式只按照某个老师的要求来的，如果有定制的需求，还是需要自己动手，那么这里就写一篇文章简单介绍一下完成这个过程中可能用到的资料、工具和可能踩到的坑。&lt;&#x2F;p&gt;
&lt;p&gt;行文中会将用到的资源用超链接放在里面，但为了方便，也会在末尾用&lt;a href=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;#can-kao-zi-liao&quot;&gt;一个列表&lt;&#x2F;a&gt;把资料列出来。&lt;&#x2F;p&gt;
&lt;p&gt;文章会先介绍 .docx文件和 markdown，是相对比较底层的简单介绍，如果只是关心程序是如何完成的，则完全可以跳过这部分。然后文章会介绍实现里的一些细节，我的实现用了 C#，开发时用的是 Visual Studio，使用的库为 Microsoft.Community.Toolkit（markdown parser）和 Open XML SDK（操作.docx文件）。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;docx-wen-jian-jie-xi&quot;&gt;.docx 文件解析&lt;&#x2F;h1&gt;
&lt;p&gt;.docx 这个后缀所对应的文件格式全写是 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Office_Open_XML_file_formats&quot;&gt;Office Open XML&lt;&#x2F;a&gt;。实质上就是一个包含了一系列有一定结构的 xml 文件的zip包，只需修改后缀名就可以用通用的解压软件将其解压并观察到里面的结构。&lt;&#x2F;p&gt;
&lt;p&gt;正如在维基页面所示，Office Open XML 对应了几种文件格式，分别是document, presentation, workbook，也就是我们常说的word, ppt, excel。在 Office Open XML 文件里，会用到几种不同的标识语言，有兴趣的在维基页面可以进一步了解。基于以上信息，不难想到我们最主要需要了解是 Office Open XML document 的文件格式，和其中被大量用到的 WordprocessingML 语言。从这一步开始，维基页面上的内容就比较深入并且主要由各种标准文件组成，从这里开始我推荐从&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;office&#x2F;open-xml&#x2F;structure-of-a-wordprocessingml-document&quot;&gt;微软的文档&lt;&#x2F;a&gt;或者&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;officeopenxml.com&#x2F;anatomyofOOXML.php&quot;&gt;officeopenxml.com&lt;&#x2F;a&gt;，如果倾向看视频了解并且不介意英文视频，那么可以考虑&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ericwhite.com&#x2F;blog&#x2F;introduction-to-wordprocessingml-series&#x2F;&quot;&gt;Eric 的博客&lt;&#x2F;a&gt;，他是曾经在微软开发 Open XML SDK 的开发人员，并且离职以后依然在空闲时间继续这方面的工作。在这一节的末尾将会简单介绍 Open XML SDK，在&lt;a href=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;#bian-cheng-shi-xian&quot;&gt;之后的章节&lt;&#x2F;a&gt;展开介绍。&lt;&#x2F;p&gt;
&lt;p&gt;为了完成我们的目标，Office Open XML 中各组成部分最主要需要关注的是 Main Document、Style Definitions，若是需要页眉、页脚，则还需要 Header、Footer 这两个部分。其他没有提及的内容并非无意义，而只是与目标相关性没有这么高，所以有需要的请自行翻阅文档。剩下不会继续介绍的部分有 Comments、Document Settings、Endnotes、Footnotes、Glossary Document。&lt;&#x2F;p&gt;
&lt;p&gt;Style Definitions 包含了和格式相关的各种东西，仅仅从复用的角度来说，也应当将格式作为存入这里而不是设置一个可以把某一段变成某种格式的函数。具体如何操作这部分的内容来达到我们所需的效果将在&lt;a href=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;#can-kao-zi-liao&quot;&gt;之后&lt;&#x2F;a&gt;具体说。其中除了寻常可见的各种格式如正文、多级标题之外，还有一种特殊的元素值得留意，就是 latentStyles。Office 内置了相当多的格式（大概200多种），如果每一个格式都将其存放在每一个文档里，显然是没必要的，但是也不能就将其直接删去让软件自己从自己的库里读取，这也就是 latentStyles 起作用的地方。原文说的是&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;延迟样式&lt;&#x2F;em&gt;引用任何一组已知的应用程序的未包括在当前文档中的样式定义。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Main Document 是一个文档所需的最基本的内容，在里面设置正文的各种内容、格式。这里可以简单介绍的是，正文的最基本的构成内容是 Paragraph，在 xml 中用 &amp;lt;p&amp;gt; 节点表示，每个 Paragraph 都会包含对应的段落格式（用 &amp;lt;pPr&amp;gt; 节点表示），文字块和一些其他可选的属性。我们直接创建的 word 文档中，段落格式通常是基于某个已有的格式加上一些其他的选项。既然 Paragraph 是以行分隔的，那么具体到中间某些文字需要区别于段落的格式，也就必然需要单独的一个对象来表示，也就是文字块 Run。Run 在 xml 中用 &amp;lt;r&amp;gt; 节点表示，其格式用 &amp;lt;rPr&amp;gt; 表示。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;markdown-de-qu-bie&quot;&gt;markdown 的区别&lt;&#x2F;h1&gt;
&lt;p&gt;markdown 是一种标志语言，所谓标致语言，根据维基的说法&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;是一种将文本（Text）以及文本相关的其他信息结合起来，展现出关于文档结构和数据处理细节的计算机文字编码。与文本相关的其他信息（包括例如文本的结构和表示信息等）与原来的文本结合在一起，但是使用标记（markup）进行标识。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;既然要处理它，那么我们同样要找到它的标准才行。&lt;&#x2F;p&gt;
&lt;p&gt;但是很可惜，直接叫 markdown 的标准严格意义上并不存在，这里的原因是作者对于在“markdown”这个名字上进行标准的强烈反对，原因是作者认为&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I believe Markdown’s success is &lt;em&gt;due to&lt;&#x2F;em&gt;, not in spite of, its lack of standardization. And its success is not disputable.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;当然，即便是这样说了，为了继续推广、应用，自然就会有各家做出自己的定义，其中据我了解比较流行的标准有&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;commonmark.org&#x2F;&quot;&gt;CommonMark&lt;&#x2F;a&gt;和&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.github.com&#x2F;gfm&#x2F;&quot;&gt;Github Flavored Markdown(GFM)&lt;&#x2F;a&gt;，除此之外，正如 markdown 的发展一样，除了这些标准以外还有许多个人实现的、组织开发的拓展，用于丰富 markdown 的表达形式（所以作者对标准化的反对也可以理解）。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;bian-cheng-shi-xian&quot;&gt;编程实现&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;shi-xian-si-lu&quot;&gt;实现思路&lt;&#x2F;h2&gt;
&lt;p&gt;要做的东西就是一个 markdown render，就是将 markdown 文档中的每个元素映射到固定的 .docx 文档组成部分。因为已经选定了 Open XML SDK，而最新的只支持 C#，所以问题就是要找个现有的 parser（毕竟我暂时还不想写个 parser 来复习编译原理）。parser 在这个工程中是相当重要的，因为 parser 确定以后，能支持的语法类型定了，markdown 能表达的格式也就定了，表达能力也就有了一个限制。同时这也是我踩的一个大坑，导致增加了之后重构所需的工作量。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;markdown-parser&quot;&gt;markdown parser&lt;&#x2F;h2&gt;
&lt;p&gt;因为搜索时不够细致，我错误地采用了 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;windows-toolkit&#x2F;WindowsCommunityToolkit&quot;&gt;Microsoft.Community.Toolkit&lt;&#x2F;a&gt; 中的 markdown parser，且不提支持的语法不够丰富，最令我无法忍受的是它居然不认为标题的&lt;code&gt;#&lt;&#x2F;code&gt;后面需要加个空格！但是当我发现这一点的时候已经晚了，工具已经到了0.9版。&lt;&#x2F;p&gt;
&lt;p&gt;不过也有一个好事，大概可能也许是因为打着微软的名头，尽管是社区维护的包，&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;microsoft.toolkit.parsers.markdown?view=win-comm-toolkit-dotnet-stable&quot;&gt;文档&lt;&#x2F;a&gt;是十分详细的。&lt;&#x2F;p&gt;
&lt;p&gt;简单来说，这个 parser 认为 markdown 由 MarkdownBlock 构成，MarkdownBlock 分为&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeBlock&lt;&#x2F;li&gt;
&lt;li&gt;HeaderBlock&lt;&#x2F;li&gt;
&lt;li&gt;HorizontalRuleBlock&lt;&#x2F;li&gt;
&lt;li&gt;LinkReferenceBlock&lt;&#x2F;li&gt;
&lt;li&gt;ListBlock&lt;&#x2F;li&gt;
&lt;li&gt;ParagraphBlock&lt;&#x2F;li&gt;
&lt;li&gt;QuoteBlock&lt;&#x2F;li&gt;
&lt;li&gt;TableBlock&lt;&#x2F;li&gt;
&lt;li&gt;YamlHeaderBlock&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;QuoteBlock 中包含的依然是 Block，如果有用的话会比较难处理；ListBlock 包含的也是 Block，不过我理解来ListBlock 只应该包含列表，所以不算很棘手；YamlHeaderBlock 有且仅有一块并且一定放在头部的位置，获得的是一个&lt;code&gt;Dictionary&amp;lt;string, string&amp;gt;&lt;&#x2F;code&gt;；HorizontalRuleBlock 就一水平线； CodeBlock 中只有纯文本，以及编程语言的名称，只要不是想渲染彩色代码，也不难做。LinkReferenceBlock、TableBlock 我没有用到，所以这里掠过。 ParagraphBlock、HeaderBlock 由 MarkdownInline 构成，这里大概可以类比成 .docx 文档里段落和文字块的关系。MarkdownInline 分为&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;BoldTextInline&lt;&#x2F;li&gt;
&lt;li&gt;CodeInline&lt;&#x2F;li&gt;
&lt;li&gt;EmojiInline&lt;&#x2F;li&gt;
&lt;li&gt;HyperlinkInline&lt;&#x2F;li&gt;
&lt;li&gt;ImageInline&lt;&#x2F;li&gt;
&lt;li&gt;ItalicTextInline&lt;&#x2F;li&gt;
&lt;li&gt;LinkAnchorInline&lt;&#x2F;li&gt;
&lt;li&gt;MarkdownLinkInline&lt;&#x2F;li&gt;
&lt;li&gt;StrikethroughTextInline&lt;&#x2F;li&gt;
&lt;li&gt;SubscriptTextInline&lt;&#x2F;li&gt;
&lt;li&gt;SuperscriptTextInline&lt;&#x2F;li&gt;
&lt;li&gt;TextRunInline&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;通过以上关系，我考虑得到的结果是下面这个图&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;design.jpg&quot; alt=&quot;Correspondence&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;处理嵌套、交错的 MarkdownInline 其实挺简单，只需要一个简单的 DFS，遇到新的非 TextRunInline 的话就加上心的格式，然后继续DFS。下面是一个简单的示例代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c#&quot; class=&quot;language-c# &quot;&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&amp;#x2F;&amp;#x2F; 输出嵌套的类HTML样子的（伪）渲染效果
static void dfs(MarkdownInline inline)
{
    if (inline is TextRunInline txt)
    {
        Console.Write($&amp;quot;txt{txt.Text}&amp;quot;);
    }
    else if (inline is CodeInline code)
    {
        Console.Write($&amp;quot;code{code.Text}&amp;quot;);
    }
    else if (inline is BoldTextInline bd)
    {
        foreach(var e in bd.Inlines)
        {
            Console.Write(&amp;quot;&amp;lt;Bold&amp;gt;&amp;quot;);
            dfs(e);
            Console.Write(&amp;quot;&amp;lt;&amp;#x2F;Bold&amp;gt;&amp;quot;);
        }
    }
    else if (inline is ItalicTextInline it)
    {
        foreach(var e in it.Inlines)
        {
            Console.Write(&amp;quot;&amp;lt;Italic&amp;gt;&amp;quot;);
            dfs(e);
            Console.Write(&amp;quot;&amp;lt;&amp;#x2F;Italic&amp;gt;&amp;quot;);
        }
    }
    else if (inline is StrikethroughTextInline st)
    {
        foreach (var e in st.Inlines)
        {
            Console.Write(&amp;quot;&amp;lt;Strike&amp;gt;&amp;quot;);
            dfs(e);
            Console.Write(&amp;quot;&amp;lt;&amp;#x2F;Strike&amp;gt;&amp;quot;);
        }
    }
    else if (inline is SubscriptTextInline ss)
    {
        foreach (var e in ss.Inlines)
        {
            Console.Write(&amp;quot;&amp;lt;Subs&amp;gt;&amp;quot;);
            dfs(e);
            Console.Write(&amp;quot;&amp;lt;&amp;#x2F;Subs&amp;gt;&amp;quot;);
        }
    }
    else if (inline is SuperscriptTextInline sp)
    {
        foreach (var e in sp.Inlines)
        {
            Console.Write(&amp;quot;&amp;lt;Super&amp;gt;&amp;quot;);
            dfs(e);
            Console.Write(&amp;quot;&amp;lt;&amp;#x2F;Super&amp;gt;&amp;quot;);
        }
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在处理思路也有了，对应关系也找了，接下来再把操作 .docx 文件解决了这个软件也就完成了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;open-xml-sdk&quot;&gt;Open XML SDK&lt;&#x2F;h2&gt;
&lt;p&gt;Open XML SDK 是由微软开发维护的用于在 Office Word, Excel, and PowerPoint 上进行编程的工具，整个 SDK 已经开源在 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;OfficeDev&#x2F;Open-XML-SDK&quot;&gt;github&lt;&#x2F;a&gt; 上。至于文档，则如 README 所言&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The functionality of the specific classes in this version of the Open XML SDK is similar to version 2.5, therefore the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;office&#x2F;bb448854.aspx&quot;&gt;Open XML SDK 2.5 for Office&lt;&#x2F;a&gt; documentation available on MSDN is still accurate.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to open sourcing of the SDK, Microsoft has opened up the conceptual documentation for public review &#x2F; contributions. A copy of the documentation is available for you to edit and review &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;OfficeDev&#x2F;office-content&quot;&gt;in GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这里要再吹一下 MSDN 的文档，在习惯之后感觉真好用。&lt;&#x2F;p&gt;
&lt;p&gt;有了文档以后还需要一些例子，这里有&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;office&#x2F;open-xml&#x2F;working-with-paragraphs&quot;&gt;微软的例子&lt;&#x2F;a&gt;，另一个是 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;EricWhiteDev&#x2F;Open-Xml-PowerTools&quot;&gt;Github上的例子&lt;&#x2F;a&gt;。除了这两个以外，一定要强烈推荐的是 Open XML SDK 2.5 Productivity Tool，这个工具通过&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;download&#x2F;details.aspx?id=30425&quot;&gt;微软下载中心&lt;&#x2F;a&gt;下载。这个工具可以将现有的 .docx\.pptx\.xlsx 文件转换为可以直接生成等价文件的 C# 代码，并且还可以顺便查看对应结构的文档。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;P.jpg&quot; alt=&quot;generated code&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;bian-cheng-shi-hen-hao-wan-de-md2docxshi-zen-yao-xie-chu-lai-de&#x2F;PD.jpg&quot; alt=&quot;documentation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;于是思路和例子都有了，甚至可以对着抄的例子都有了，接下来需要的东西就是粘合和重构了。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;qi-ta-si-lu&quot;&gt;其他思路&lt;&#x2F;h1&gt;
&lt;p&gt;解析 Markdown 这里自然不必多说，不论已经有的那么多轮子，就算从头写一个 Parser 也不是太大的负担，主要考虑的还是操作 .docx 文件这一重。&lt;&#x2F;p&gt;
&lt;p&gt;Eiric White 在博客中提到了了 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ericwhite.com&#x2F;blog&#x2F;open-xml-sdk-for-javascript&#x2F;&quot;&gt;Open XML SDK for JavaScript&lt;&#x2F;a&gt;，不过里面相关的资料还有不少在建设当中，不知道具体情况如何。&lt;&#x2F;p&gt;
&lt;p&gt;其次 python 有一个包叫做 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;python-docx.readthedocs.io&#x2F;en&#x2F;latest&#x2F;&quot;&gt;python-docx&lt;&#x2F;a&gt;，实现了不小的一部分 Open XML 相关的操作，可惜貌似连设置中文字体都需要 hook 到比较底层的实现，不是很优雅的选择，而且没有保障，所以如果需要用到中文建议还是跳过这个选择把（不过看这篇文章的会有非中文文档的需求吗）。&lt;&#x2F;p&gt;
&lt;p&gt;除此之外就剩下两个比较底层的做法：&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;com&#x2F;component-object-model--com--portal&quot;&gt;COM Programming&lt;&#x2F;a&gt; 和 直接操作 XML。&lt;&#x2F;p&gt;
&lt;p&gt;除了原生支持的 VC、VB 以外，已经有多种语言对 COM 做了封装，其中包括比较常见的 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;jacob-project&#x2F;&quot;&gt;Java&lt;&#x2F;a&gt;、&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;pywin32&#x2F;&quot;&gt;python&lt;&#x2F;a&gt;、&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;win32com&quot;&gt;JavaScript&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;另一个正如前文所说，.Open XML 文件实质上就是一个包含了一系列有一定结构的 xml 文件的zip包，那么只需要操作多个 xml 文件，最后将其打包也就完成了。如果这里有需求，可以参考 Open XML 相关的文档。各语言大部分都有 zip、xml 相关的库，这里也就不再赘述。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;hou-xu-gong-zuo&quot;&gt;后续工作&lt;&#x2F;h1&gt;
&lt;p&gt;我自己的软件算是做出了一个 Minimum Viable Product，还有很多不足，接下来我打算利用空闲时间做以下工作。（如果被开了就全职一下，嘤）&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;加入测试（但是目前怎么测试我还没想好，可能参考 Open-Xml-PowerTools 里的测试），顺便重构&lt;&#x2F;li&gt;
&lt;li&gt;搭 CI&lt;&#x2F;li&gt;
&lt;li&gt;更换 markdown parser&lt;&#x2F;li&gt;
&lt;li&gt;将输出格式设置从硬编码改为 json（但是坦白说目前还没想好怎么处理类似封面、页眉、页脚、摘要之类的东西）&lt;&#x2F;li&gt;
&lt;li&gt;加入页眉、页脚&lt;&#x2F;li&gt;
&lt;li&gt;加入图片、图题&lt;&#x2F;li&gt;
&lt;li&gt;加入表格&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Office Open XML
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Office_Open_XML_file_formats&quot;&gt;wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ericwhite.com&#x2F;blog&#x2F;introduction-to-wordprocessingml-series&#x2F;&quot;&gt;Introduction to WordprocessingML Series&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;office&#x2F;open-xml&#x2F;structure-of-a-wordprocessingml-document&quot;&gt;微软文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;officeopenxml.com&#x2F;anatomyofOOXML.php&quot;&gt;officeopenxml.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Markdown
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;commonmark.org&#x2F;&quot;&gt;CommonMark&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.github.com&#x2F;gfm&#x2F;&quot;&gt;Github Flavored Markdown(GFM)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;microsoft.toolkit.parsers.markdown?view=win-comm-toolkit-dotnet-stable&quot;&gt;Microsoft.Toolkit.Parsers文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;windows-toolkit&#x2F;WindowsCommunityToolkit&#x2F;blob&#x2F;090542f0fdd0aeeabb6140316ff51da31afdbed2&#x2F;Microsoft.Toolkit.Uwp.SampleApp&#x2F;SamplePages&#x2F;MarkdownTextBlock&#x2F;InitialContent.md&quot;&gt;Microsoft.Toolkit.Parsers 对应的 Markdown 标准&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Open XML SDK
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;OfficeDev&#x2F;Open-XML-SDK&quot;&gt;GitHub repo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;office&#x2F;bb448854.aspx&quot;&gt;Open XML SDK 2.5 Documentataion&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;office&#x2F;open-xml&#x2F;working-with-paragraphs&quot;&gt;Microsoft Examples&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;EricWhiteDev&#x2F;Open-Xml-PowerTools&quot;&gt;Other Examples&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;download&#x2F;details.aspx?id=30425&quot;&gt;Open XML SDK 2.5 Productivity Tool&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Other
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ericwhite.com&#x2F;blog&#x2F;open-xml-sdk-for-javascript&#x2F;&quot;&gt;Open XML SDK for JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;python-docx.readthedocs.io&#x2F;en&#x2F;latest&#x2F;&quot;&gt;python-docx&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;com&#x2F;component-object-model--com--portal&quot;&gt;COM Programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;jacob-project&#x2F;&quot;&gt;JACOB - Java COM Bridge&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;pywin32&#x2F;&quot;&gt;pywin32&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;win32com&quot;&gt;npm - win32com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>安装式工具集合</title>
		<published>2018-03-01T21:59:01+08:00</published>
		<updated>2020-08-07T01:48:37.619600+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/an-zhuang-shi-gong-ju-ji-he/" type="text/html"/>
		<id>https://CSUwangj.github.io/an-zhuang-shi-gong-ju-ji-he/</id>
		<content type="html">&lt;p&gt;持续更新ing&lt;&#x2F;p&gt;
&lt;p&gt;可能以后还会重新整理&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;ying-yu-gong-ju&quot;&gt;英语工具&lt;&#x2F;h1&gt;
&lt;p&gt;http:&#x2F;&#x2F;www.1checker.com&#x2F;Products&#x2F;DownLoad&lt;&#x2F;p&gt;
&lt;p&gt;http:&#x2F;&#x2F;www.gingersoftware.com&#x2F;zh&#x2F;download&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
